var events = require('events'),
	util = require('util');


/*
* Constructs a new Rayo Mock Transport for testing
*/
var Transport = module.exports = function() {
    this.outbox = [];
};

// Mix in eventing
util.inherits(Transport, events.EventEmitter);

/*
* Puts the transport into service. This is particularly important for transports with active connections
* like XMPP as it allows consumers to register handlers before the transport begins taking requests.
*/
Transport.prototype.start = function() {};

Transport.prototype.send = function(command, callback) {
   console.log('Sending: ' + command.body.root() + ' [smid:' + command.smid +', callId:' + command.callId + ', componentId:' + command.componentId + ']');
   this.outbox.push(arguments);
};

Transport.prototype.next = function(callback) {

   var transportSendArguments = this.outbox.shift();

   // If the test is interested in the actual arguments to transport.send()
   // Or if it wants to invoke the callback itself
   if(callback) {
      callback.apply(this, transportSendArguments);
   }
   // Otherwise just pop the queue and invoke the callback with null arguments
   else {
      // Invoke the callback from the call to transport.send()
      transportSendArguments[2].call(null, null);
   }
};

Transport.prototype.hasNext = function() {

    return this.outbox.length > 0;
};

Transport.prototype.singleton = function() {
    return singleton;
};

