var util = require('util');
var xml2js = require('xml2js');
var xmlbuilder = require('xmlbuilder');


module.exports.createGetter = function createGetter(target, name, map) {
   target.__defineGetter__(name, function(){
      return map[name];
   });
};


var XmlElement = module.exports.XmlElement = function (name, attr, parent) {
    var _this = this;
    _this.text = null;
    _this.children = [];
    _this._parent = parent;
    if (!parent) {
        _this._builder = xmlbuilder.create(name);
        _this._element = _this._builder.root(); 
    } else {
        _this._element = parent._element.ele(name);
        parent.children.push(_this);
    }

    for (var key in attr) {
    	if (attr[key]) {
            _this._element.attribute(key,attr[key]);
    	}
    }
};

XmlElement.prototype.c = function(name, attr) {
    var result = new XmlElement(name,attr,this);
    return result;
};

XmlElement.prototype.t = function(text) {
    this._element.txt(text);
    this._text = text;
    this.children.push(text);
    return this;
};

XmlElement.prototype.up = function() {
	var result = this._parent;
	if (!result) {
		result = this;
	}
    return result;
};



XmlElement.prototype.root = function() {
	var result = this;
	while (result._parent) {
		result = result._parent;
	}
    return result;
};

XmlElement.prototype.getChild = function(name) {
	var result = null;
	var kids = this.children;
	for (var idx = 0; idx < kids.length; idx++) {
		if (kids[idx].getName && kids[idx].getName() == name) {
			result = kids[idx];
			break;
		}
	}
	return result;
};

XmlElement.prototype.getChildren = function(name) {
	var result;
	var kids = this.children;
	if (name) {
		result = [];
		for (var idx = 0; idx < kids.length; idx++) {
			if (kids[idx].getName && kids[idx].getName() == name) {
				result.push(kids[idx]);
			}
		}
	} else {
		result = kids;
	}
	return result;
};

XmlElement.prototype.getName = function() {
	var result = null;
	if (this._element) {
		result = this._element.name;
	}
	return result;
};

XmlElement.prototype.getText = function() {
	return this._text;
};

XmlElement.prototype.toString = function() {
    return this._element.end({ pretty : false });
};

XmlElement.prototype.__defineGetter__('attrs', function(){
	var result = null;
	if (this._element) {
		result = {};
		var attrs = this._element.attributes;
		for (var key in attrs) {
			if (attrs[key]) {
				result[key] = attrs[key].value;
			}
		}
	}
	return result;
});



module.exports.parseXml = function (xml, callback) {
	xml2js.parseString(xml, function(err, rawResult) {
		if (err) {
			if (callback) {
				callback(err);
			} else {
				console.log('err',err);
			}
		} else {
			var rootName = Object.keys(rawResult)[0];
			var result = buildTree(null,rootName,rawResult[rootName]);
			if (callback) {
				callback(null,result);
			}
		}
	});
};

function buildTree(parent,name,node) {

	if (node === null) {
		return null;
	}
	
    if (Array.isArray(node)) {
        for (var idx = 0; idx < node.length; idx++) {
            buildTree(parent,name,node[idx]);
        }
        return;
    }
    
    
	var attr = node.$ || {};
	var result;
	if (parent) {
		result = parent.c(name, attr);
	} else {
		result = new XmlElement(name, attr, parent);
	}
	
    
	var txt;
    if (typeof(node) === 'string' && node.length > 0) {
    	txt = node;
    } else {
    	txt = node._;
    }
    
	if (txt) {
		result.t(txt);
	}
	
	if (typeof(node) === 'object') {
		for (var key in node) {
			if (key != '$' && key != '_') {
				buildTree(result, key, node[key]);
			}
		}
	}
	
	return result;
}