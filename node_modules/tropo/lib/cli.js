/*global console,module,process,require*/
var domain = require('domain'),
    path = require('path'),
    flatiron = require('flatiron'),
    util = require('util'),
    fs = require('fs');

var cli = module.exports = flatiron.app;

//
// Setup `tropo` to use `pkginfo` to expose version
//
require('pkginfo')(module, 'name', 'version');


var conf = cli.config;

conf.argv().env();

function existsTropoConf(confPath) {
    "use strict";
    var exists;
    if (confPath === '/') {
        exists = fs.existsSync(confPath + ".tropoconf");
    } else {
        exists = fs.existsSync(confPath + "/.tropoconf");
    }
    return exists;
}

var confPath = conf.get('config');
// find .tropoconf starting from the current working directory up to the root
// and if still not found looking into the users' home directory
if (!confPath) {
    // start in current working directory
    confPath = process.cwd();
    if (!existsTropoConf(confPath)) {
        // if not found in current working directory, walk up towards the
        // root directory
        while (confPath !== "/") {
            confPath = fs.realpathSync(confPath + "/..");
            if (existsTropoConf(confPath)) {
                break;
            }
        }
    }
    if (!existsTropoConf(confPath)) {
        // if still not found, assume the users' home directory
        confPath = process.env.HOME;
    }
    if (confPath === "/") {
        confPath = confPath + '.tropoconf';
    } else {
        confPath = confPath + '/.tropoconf';
    }
}
conf.file({ file: confPath });

var creds = require('./creds');

var usage = ['Usage: tropo <command> [arg 1] [arg 2] [arg ...]',
    '',
    'Use command \'help\' for list of commands'];

//
//Configure tropo to use `flatiron.plugins.cli`
//
cli.use(flatiron.plugins.cli, {
    source: path.join(__dirname, 'commands'),
    usage: usage,
    argv: {
        provisioningServerUrl: {
            string: true
        },
        version: {
            description: 'print Tropo version and exit'
        }
    }
});

cli.prompt.override = cli.argv;
cli.prompt.start();


var domain = cli.domain = domain.create();
domain.on('error', function (err) {
    console.log("error: " + util.inspect(err));
    cli.log.error('Domain Error ', err.message, err.stack);
});

function startCli(callback) {
    cli.start(function (err) {
        if (!err) {
            cli.log.info("Success.");
        } else {
            cli.log.error(err.message);
            if (err.stack && conf.get('printStackTraces')) {
            	cli.log.error(err.stack);
            }
        }
        callback(err);
    });
}

cli.go = function (callback) {
    // console.log("0: " + process.argv[0]);
    // console.log("1: " + process.argv[1]);
    // console.log("2: " + process.argv[2]);
    if (process.argv[2]) {
        if ((process.argv[2] === "--version" ||
            process.argv[2] === "version")) {
            console.dir(module.exports.version);
            return;
        }
    }
    
    var username = conf.get('provisioningServerUsername');
    if (!username) {
        creds.prompt(function (err) {
            if (err) {
                console.error('Error occurred: ', err.message);
                process.exit(1);
            } else {
                if (process.argv[2] === 'login') {
                    console.log("Success.");
                } else {
                    startCli(callback);
                }
            }
        });
    } else {
        startCli(callback);
    }
};







