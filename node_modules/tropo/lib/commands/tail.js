/*global console,exports,require*/

var cli = require('../cli'),
    tropo = require('../cli'),
    util = require('util'),
    repo = require('../repo');

var log = tropo.log;
var prompt = cli.prompt;
var tailLengthDefault = 2500;

var env = function (arg, callback) {
    "use strict";

    if (arg) {
        repo.Instances.findPathNQueryParamTP(arg, ["content", "tailLength"], ["env.log", tailLengthDefault], function (err, data) {
            if (err) {
                if (err.message.indexOf("ot foun") !== -1) {
                    callback(new Error("Application instance not found."));
                } else {
                    callback(err);
                }
            } else {
                console.log("--- start env.log content ----");
                console.log(data);
                console.log("--- end env.log content ----");
            }
        });
        return;
    }
    var schema = {
        properties: {
            instanceId: {
                required: true
            },
            tailLength: {
                required: false,
                message: "tail length (in bytes)"
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var instance = result.instanceId,
            tailLength = result.tailLength;
        repo.Instances.findPathNQueryParamTP(instance, ["content", "tailLength"], ["env.log", tailLength], function (err, data) {
            if (err) {
                if (err.message.indexOf("ot foun") !== -1) {
                    callback(new Error("Application instance not found."));
                } else {
                    callback(err);
                }
            } else {
                console.log("--- start env.log content ----");
                console.log(data);
                console.log("--- end env.log content ----");
            }
        });
    });
};
exports.env = env;

var staging = function (arg, callback) {
    if (arg) {
        repo.Instances.findPathNQueryParamTP(arg, ["content", "tailLength"], ["staging_task.log", tailLengthDefault], function (err, data) {
            if (err) {
                if (err.message.indexOf("ot foun") !== -1) {
                    callback(new Error("Application instance not found."));
                } else {
                    callback(err);
                }
            } else {
                console.log("--- start staging_task.log content ----");
                console.log(data);
                console.log("--- end staging_task.log content ----");
            }
        });
        return;
    }
    var schema = {
        properties: {
            instanceId: {
                required: true
            },
            tailLength: {
                required: false,
                message: "tail length (in bytes)"
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var instance = result.instanceId,
            tailLength = result.tailLength;
        repo.Instances.findPathNQueryParamTP(instance, ["content", "tailLength"], ["staging_task.log", tailLength], function (err, data) {
            if (err) {
                if (err.message.indexOf("ot foun") !== -1) {
                    callback(new Error("Application instance not found."));
                } else {
                    callback(err);
                }
            } else {
                console.log("--- start staging_task.log content ----");
                console.log(data);
                console.log("--- end staging_task.log content ----");
            }
        });
    });
};
exports.staging = staging;

var stdout = function (arg, callback) {
    if (arg) {
        repo.Instances.findPathNQueryParamTP(arg, ["content", "tailLength"], ["stdout.log", tailLengthDefault], function (err, data) {
            if (err) {
                if (err.message.indexOf("ot foun") !== -1) {
                    callback(new Error("Application instance not found."));
                } else {
                    callback(err);
                }
            } else {
                console.log("--- start stdout.log content ----");
                console.log(data);
                console.log("--- end stdout.log content ----");
            }
        });
        return;
    }
    var schema = {
        properties: {
            instanceId: {
                required: true
            },
            tailLength: {
                required: false,
                message: "tail length (in bytes)"
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var instance = result.instanceId,
            tailLength = result.tailLength;
        repo.Instances.findPathNQueryParamTP(instance, ["content", "tailLength"], ["stdout.log", tailLength], function (err, data) {
            if (err) {
                if (err.message.indexOf("ot foun") !== -1) {
                    callback(new Error("Application instance not found."));
                } else {
                    callback(err);
                }
            } else {
                console.log("--- start stdout.log content ----");
                console.log(data);
                console.log("--- end stdout.log content ----");
            }
        });
    });
};
exports.stdout = stdout;

var stderr = function (arg, callback) {
    if (arg) {
        repo.Instances.findPathNQueryParamTP(arg, ["content", "tailLength"], ["stderr.log", tailLengthDefault], function (err, data) {
            if (err) {
                if (err.message.indexOf("ot foun") !== -1) {
                    callback(new Error("Application instance not found."));
                } else {
                    callback(err);
                }
            } else {
                console.log("--- start stderr.log content ----");
                console.log(data);
                console.log("--- end stderr.log content ----");
            }
        });
        return;
    }
    var schema = {
        properties: {
            instanceId: {
                required: true
            },
            tailLength: {
                required: false,
                message: "tail length (in bytes)"
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var instance = result.instanceId,
            tailLength = result.tailLength;
        repo.Instances.findPathNQueryParamTP(instance, ["content", "tailLength"], ["stderr.log", tailLength], function (err, data) {
            if (err) {
                if (err.message.indexOf("ot foun") !== -1) {
                    callback(new Error("Application instance not found."));
                } else {
                    callback(err);
                }
            } else {
                console.log("--- start stderr.log content ----");
                console.log(data);
                console.log("--- end stderr.log content ----");
            }
        });
    });
};
exports.stderr = stderr;