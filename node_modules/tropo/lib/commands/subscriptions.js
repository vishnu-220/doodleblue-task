/*global console,exports,require*/

var cli = require('../cli'),
    repo = require('../repo'),
    prettylayout = require('../pretty-layout'),
    util = require('util');

var log = cli.log;
var prompt = cli.prompt;

var get = function (arg, callback) {
    "use strict";
    if (arg) {
        repo.Subscriptions.find(arg, function (err, data) {
            if (data) {
                log.data(util.inspect(data));
            }
            callback(err, data);
        });
        return;
    }
    var schema = {
        properties: {
            subscriptionId: {
                required: true
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var subscription = result.subscriptionId;
        repo.Subscriptions.find(subscription, function (err, data) {
            if (data) {
                log.data(util.inspect(data));
            }
            callback(err, data);
        });
    });
};
exports.get = get;

exports.list = function (arg, callback) {
    "use strict";
    repo.Subscriptions.list(function (err, data) {
        var pl,
            idx,
            entity;
        if (data) {
            if (data.length === 0) {
                console.log("No subscriptions found.");
            } else {
                pl = prettylayout;
                pl.header(["Subscription Id", "Address Value", "Revision Name", "Revision Id", "Priority", "Auto-Update", "Required", "Platform Url", "Config", "Permissions"]);
                for (idx = 0; idx < data.length; idx = idx + 1) {
                    entity = data[idx];
                    pl.row([entity.id, entity.value, entity.revisionName, entity.revisionId, entity.priority, entity.autoUpdate, entity.required, entity.url, util.inspect(entity.config), entity.permissions]);
                }
                pl.paint();
            }
        }
        callback(err, data);
    });
};

var add = function (arg, callback) {
    "use strict";
    var schema = {
        properties: {
            addressType: {
        		message: 'Possible values are sip or number',
        		required: true,
        		pattern: /sip|number/      		
            },
            addressValue: {
                required: true
            },
            priority: {
                required: true
            },
            autoUpdate: {
                default: false,
                required: false
            },
            config: {
                default: "null",
                required: false
            },
            permissions: {
                default: "null",
                required: false
            },
            required: {
                default: false,
                required: false
            },
            revisionId: {
            	required: true
            }
        }
    };

    prompt.get(schema, function (err, result) {
            var subscription = {},
                i,
                parsedConfig;

            if (err) {
                callback(err);
                return;
            }

            subscription = {};
            subscription.priority = result.priority;
            subscription.autoUpdate = result.autoUpdate;
            subscription.required = result.required;
            subscription.type = result.type;
        	subscription.type = 'number';
        	subscription.value = result.addressValue;
            subscription.revision = result.revisionId;
            if ((result.autoUpdate === "true") || (result.autoUpdate === "false")) {
                subscription.autoUpdate = result.autoUpdate === "true";
            } else {
                callback(new Error("autoUpdate must be true or false"));
            }
            if (result.config === "null") {
                subscription.config = null;
            } else {
                try {
                    parsedConfig = JSON.parse(result.config);
                    if (parsedConfig.constructor !== Object) {
                        callback(new Error("Config must be JSON object"));
                        return;
                    }
                    subscription.config = parsedConfig;
                } catch (e) {
                    callback(new Error("Config parse error: " + e));
                    return;
                }
            }
            if ((result.permissions === "null") || (result.permissions === "")) {
                subscription.permissions = [];
            } else {
                subscription.permissions = result.permissions.split(",");
                for (i = 0; i < subscription.permissions.length; i = i + 1) {
                    subscription.permissions[i] = subscription.permissions[i].trim();
                }
            }
            
            // console.log(JSON.stringify(subscription));

            repo.Subscriptions.create(subscription, function (err, data) {
                if (!err && data) {
                    // console.log(data);
                }
                callback(err, data);
            });
        }
    );
};
exports.add = add;

exports.update = function (arg, callback) {
    "use strict";
    if (arg) {
        repo.Subscriptions.find(arg, function (err, data) {
            if (data) {
                // log.data(util.inspect(data));
                var schema = {
                    properties: {
                        priority: {
                            default: data.priority,
                            required: false
                        },
                        config: {
                            default: JSON.stringify(data.config),
                            required: false
                        },
                        permissions: {
                            default: data.permissions,
                            required: false
                        },
                        autoUpdate: {
	                        default: data.autoUpdate,
	                        required: false
                        },
                        required: {
                            default: data.required,
                            required: false
                        }
                    }
                };

                prompt.get(schema, function (err, result) {
                        if (err) {
                            callback(err);
                            return;
                        }
                        var i;
                        var parsedConfig;

                        if (result.priority) {
                        	data.priority = result.priority;
                        }
                        if (result.required !== null) {
                        	data.required = result.required;
                        }
                        if (result.autoUpdate !== null) {
                        	data.autoUpdate = result.autoUpdate;
                        }
                        if (!result.config || result.config === "null") {
                            data.config = null;
                        } else {
                            try {
                                parsedConfig = JSON.parse(result.config);
                                if (parsedConfig.constructor !== Object) {
                                    callback(new Error("Config must be JSON object"));
                                    return;
                                }
                                data.config = parsedConfig;
                            } catch (e) {
                                callback(new Error("Config parse error: " + e));
                                return;
                            }
                        }
                        if (!result.permissions || (result.permissions === "null") || (result.permissions === "")) {
                            data.permissions = null;
                        } else {
                            data.permissions = result.permissions.split(",");
                            for (i = 0; i < data.permissions.length; i = i + 1) {
                                data.permissions[i] = data.permissions[i].trim();
                            }
                        }

                        delete data.appInstance.appRevision;
                        //console.log(JSON.stringify(data));

                        repo.Subscriptions.update(arg, data, function (err, updatedData) {
                            if (!err && updatedData) {
                                // console.log(data);
                            }
                            callback(err, updatedData);
                        });
                    }
                );
            } else {
                return callback(new Error("Subscription id not found: " + arg));
            }
        });
    } else {
        return callback(new Error("Invalid subscription id: " + arg));
    }
};

exports.rm = function (arg, callback) {
    "use strict";
    if (arg) {
        repo.Subscriptions.delete(arg, function (err, data) {
            if (data) {
                // console.log(data);
            }
            callback(err, data);
        });
        return;
    }

    var schema = {
        properties: {
            subscriptionId: {
                required: true
            }
        }
    };

    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var subscription = result.subscriptionId;
        repo.Subscriptions.delete(subscription, function (err, data) {
            if (data) {
                // console.log(data);
            }
            callback(err, data);
        });
    });
};
