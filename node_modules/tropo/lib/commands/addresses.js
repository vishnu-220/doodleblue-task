var cli = require('../cli'),
    util = require('util'),
    repo = require('../repo'),
    prettylayout = require('../pretty-layout');

var domain = cli.domain;
var log = cli.log;
var prompt = cli.prompt;

exports.list = function (arg, callback) {
    repo.Addresses.list(function (err, data) {
        if (data) {
            if (data.length === 0) {
                console.log("No addresses found.");
            } else {
                var pl = prettylayout;
                pl.header(["Address Type", "Address Value"]);
                for (var idx = 0; idx < data.length; idx++) {
                    var entity = data[idx];
                    if (entity.type === 'number') {
                        pl.row([entity.type, entity.number]);                    	
                    } else if (entity.type === 'sip') {
                        pl.row([entity.type, entity.address]);                    	                    	
                    } else if (entity.type === 'token') {
                        pl.row([entity.type, entity.token]);                    	                    	                    	
                    } else if (entity.type === 'pin') {
                        pl.row([entity.type, entity.number]);                    	                    	                    	
                    }
                }
                pl.paint();
            }
        }
        callback(err, data);
    });
};

exports.add = function (arg2, arg3, callback) {
    // arg2: type
    // arg3: value
    // console.log("type: " + arg2);
    // console.log("value: " + arg3);
    if (arg2 && arg3) {
        createAddress({type: arg2, value: arg3}, callback);
    } else {
        var prompt = cli.prompt;
        var schema = {properties: {
        	addressType: {
        		message: "Possible values are 'sip' or 'number'",
        		required: true,
        		pattern: /sip|number/      		
        	},
            addressValue: {
                required: true
            }
        }
        };

        prompt.get(schema, function (err, result) {
            if (err) {
                callback(err);
            } else {
                createAddress(result, callback);
            }
        });
    }
};

var get = function (arg1, arg2, callback) {
    // arg1: type
    // arg2: value
    // console.log("type: " + arg1);
    // console.log("value: " + arg2);
    var error;
    if (arg1 && arg2) {
        repo.Addresses.findByPath(arg1 + '/' + arg2, function (err, data) {
            if (data) {
                // log.data(util.inspect(data));
            }
            callback(err, data);
        });
        return;
    } else if (arg1) {
        error = new Error();
        error.message = "Argument for 'addressValue' is missing.";
        callback(error, null);
        return;
    } else if (arg2) {
        error = new Error();
        error.message = "Argument for 'addressType' is missing.";
        callback(error, null);
        return;
    }
    var schema = {
        properties: {
            addressType: {
                required: true,
                pattern: /sip|number/
            },
            addressValue: {
            	required: true
            }
        }
    };

    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var addressType = result.addressType;
        var addressValue = result.addressValue;
        repo.Addresses.findByPath(addressType + '/' + addressValue, function (err, data) {
            if (data) {
                // log.data(util.inspect(data));
            }
            callback(err, data);
        });
    });
};
exports.get = get;

function createAddress(result, callback) {
    var body = {
    	type: result.addressType
    };
    if (body.type === 'sip') {
    	body.address = result.addressValue;
    } else {
    	body.number = result.addressValue;
    }
    repo.Addresses.create(body, function (err, data) {
        //log.data(util.inspect(data));
        callback(err);
    });
}

var rm = function (arg1, arg2, callback) {
    // arg1: type
    // arg2: value
    // console.log("type: " + arg1);
    // console.log("value: " + arg2);
    var error;
    var cascading = "?cascading=true";
    if (arg1 && arg2) {
    	var path = encodeURIComponent(arg1) + '/' + encodeURIComponent(arg2) + cascading;
        repo.Addresses.deleteByPath(path, function (err, data) {
            callback(err, data);
        });
        return;
    } else if (arg1) {
        error = new Error();
        error.message = "Argument for 'addressValue' is missing.";
        callback(error, null);
        return;
    } else if (arg2) {
        error = new Error();
        error.message = "Argument for 'addressType' is missing.";
        callback(error, null);
        return;
    }
    var schema = {
        properties: {
            addressType: {
                required: true,
                pattern: /sip|number/
            },
            addressValue: {
                required: true
            }            
        }
    };

    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var addressType = result.addressType;
        var addressValue = result.addressValue;
    	var path = encodeURIComponent(addressType) + '/' + encodeURIComponent(addressValue) + cascading;
        repo.Addresses.deleteByPath(path, function (err, data) {
            if (data) {
                // console.log(data);
            }
            callback(err, data);
        });
    });

};
exports.rm = rm;
