var cli = require('../cli'),
    prompt = require('prompt'),
    util = require('util'),
    repo = require('../repo'),
    prettylayout = require('../pretty-layout');

var log = cli.log;
var prompt = cli.prompt;

var list = function (arg, callback) {
    repo.Users.list(function (err, data) {
        if (data) {
            if (data.length === 0) {
                console.log("No users found.");
            } else {
                var pl = prettylayout;
                pl.header(["User Id", "User Name", "User Email"]);
                for (var idx = 0; idx < data.length; idx++) {
                    var entity = data[idx];
                    pl.row([entity.id, entity.username,
                        entity.email]);
                }
                pl.paint();
            }
        }
        callback(err, data);
    });
};
exports.list = list;

exports.add = function (arg, callback) {
    var user = {};
    promptForUserDetails(function (err, result) {
        if (err) {
            callback(err, null);
        }
        user.username = result.username;
        user.password = result.password;
        user.email = result.email;
        // Tropo Provisioning requires some value on first and last names
        if(!user.firstName) {
        	user.firstName = 'No first name';
        }
        if(!user.lastName) {
        	user.lastName = 'No last name';
        }
        user.active = true;
        repo.Users.create(user, function (err, data) {
            if (data) {
                // console.log(data);
            }
            callback(err, data);
        });
    });
};

var get = function (arg, callback) {
    if (arg) {
        repo.Users.find(arg, function (err, data) {
            if (data) {
                log.data(util.inspect(data));
            }
            callback(err, data);
        });
        return;
    }
    var schema = {
        properties: {
            username: {
                required: true
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var username = result.username;
        repo.Users.find(username, function (err, data) {
            if (data) {
                log.data(util.inspect(data));
            }
            callback(err, data);
        });
    });
};
exports.get = get;

exports.rm = function (arg, callback) {
    if (arg) {
        repo.Users.delete(arg, function (err, data) {
            callback(err, data);
        });
        return;
    }
    var schema = {
        properties: {
            username: {
                required: true
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var username = result.username;
        repo.Users.delete(username, function (err, data) {
            callback(err, data);
        });
    });
};

function promptForUserDetails(cb) {
    var schema = {
        properties: {
            username: {},
            password: {
                hidden: true
            },
            email: {},
            firstName: {
	            default: "null",
	            required: false
            },
            lastName: {
	            default: "null",
	            required: false
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            cb(err, null);
        }
        cb(null, result);
    });
}
