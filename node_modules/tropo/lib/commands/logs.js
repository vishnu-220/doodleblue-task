var cli = require('../cli'),
    tropo = require('../cli'),
    util = require('util'),
    repo = require('../repo');

var log = tropo.log;
var prompt = cli.prompt;



function doGo(logName,revisionId,instanceNumber,callback) {
	function onEnd(err, data) {
        if (err) {
            if (err.message.indexOf("ot foun") !== -1) {
                callback(new Error("Revision not found."));
            } else {
                callback(err);
            }
        } else {
            console.log('--- start ' + logName + ' content ----');
            console.log(data);
            console.log('--- end ' + logName + ' content ----');
            return callback();
        }
    }
    repo.Revisions.findPathNQueryParamTP(
    		revisionId, 
    		["content","instanceNumber"], 
    		[logName,instanceNumber], 
    		onEnd);
}

function go() {
	var callback,logName,revisionId,instanceNumber;
	if (arguments.length > 1) {
		logName = arguments[0];
		callback = arguments[arguments.length - 1];
		if (!callback || typeof(callback) !== 'function') {
			throw new Error('invalid argument, expected function');
		}
		
		if (arguments.length > 2) {
			revisionId = arguments[1];
			if (arguments.length > 3) {
				instanceNumber = arguments[2];
			}
		}
	} else {
		throw new Error('not enough arguments');
	}
	
	if (!revisionId) {
		var schema = {
	        properties: {
	            revisionId: {
	                required: true
	            },
	            instanceNumber: {
	            	required: false,
	            	default: '0'            	
	            }
	        }
	    };
	    prompt.get(schema, function (err, result) {
	        if (err) {
	            callback(err);
	            return;
	        }

	        revisionId = result.revisionId;
	        instanceNumber = result.instanceNumber;
	        return doGo(logName,revisionId,instanceNumber,callback);	        
	    });
    } else {
		if (!instanceNumber) {
			instanceNumber = 0;
		}
		return doGo(logName,revisionId,instanceNumber,callback);
	}
}


var env = function() {
	[].unshift.apply(arguments,['env.log']);
	return go.apply(this,arguments);
}; 
	
var stdout = function() {
	[].unshift.apply(arguments,['stdout.log']);
	return go.apply(this,arguments);
}; 

var stderr = function() {
	[].unshift.apply(arguments,['stderr.log']);
	return go.apply(this,arguments);
}; 

var staging = function() {
	[].unshift.apply(arguments,['staging_task.log']);
	return go.apply(this,arguments);
};

exports.env = env;
exports.staging = staging;
exports.stdout = stdout;
exports.stderr = stderr;