var cli = require('../cli'),
    fs = require('fs'),
    repo = require('../repo'),
    prettylayout = require('../pretty-layout'),
    util = require('util');

var log = cli.log;
var prompt = cli.prompt;

var add = function (arg, callback) {
    var entity = {};
    promptForCloudDetails(function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        entity.name = result.name;
        entity.platformUrl = result.platformUrl;
        entity.platformUseremail = result.platformUseremail;
        entity.platformPassword = result.platformPassword;
        entity.cfOrganization = result.cfOrganization;
        entity.cfSpace = result.cfSpace;
        if (result.cfAppDomain === 'null') {
            entity.cfAppDomain = null;
        } else {
            entity.cfAppDomain = result.cfAppDomain;
        }
        entity.cfAppUrlScheme = result.cfAppUrlScheme;
        entity.defaultMaxSubscribersPerInstance =
            parseInt(result.defaultMaxSubscribersPerInstance);
        entity.defaultMinSubscriptionCapacity =
            parseInt(result.defaultMinSubscriptionCapacity);
        entity.defaultMinimumInstanceAge =
            parseInt(result.defaultMinimumInstanceAge);
        entity.defaultMemorySizePerInstance =
            parseInt(result.defaultMemorySizePerInstance);
        entity.defaultDiskSizePerInstance =
            parseInt(result.defaultDiskSizePerInstance);
        if (result.httpProxy === 'null') {
            entity.httpProxy = null;
        } else {
            entity.httpProxy = result.httpProxy;
        }
        if (result.httpsProxy === 'null') {
            entity.httpsProxy = null;
        } else {
            entity.httpsProxy = result.httpsProxy;
        }

        // NOTE: for testing CLI against non-unified provisioning
        // entity = {entity: entity};

        repo.Clouds.create(entity, function (err, data) {
            if (data) {
                // console.log(data);
            }
            callback(err, data);
        });
    });
};
exports.add = add;

var get = function (arg, callback) {
    if (arg) {
        repo.Clouds.find(arg, function (err, data) {
            if (data) {
                log.data(util.inspect(data));
            }
            callback(err, data);
        });
        return;
    }
    var schema = {
        properties: {
            cloudId: {
                required: true
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var cloud = result.cloudId;
        repo.Clouds.find(cloud, function (err, data) {
            if (data) {
                log.data(util.inspect(data));
            }
            callback(err, data);
        });
    });
};
exports.get = get;

var list = function (arg, callback) {
    repo.Clouds.list(function (err, data) {
        if (data) {
            if (data.length === 0) {
                console.log("No clouds found.");
            } else {
                var pl = prettylayout;
                pl.header(["Cloud Id", "Cloud Name", "Platform Url", "State"]);
                for (var idx = 0; idx < data.length; idx++) {
                    var entity = data[idx];
                    pl.row([entity.id, entity.name, entity.platformUrl, entity.state]);
                }
                pl.paint();
            }
        }
        callback(err, data);
    });
};
exports.list = list;

function promptForCloudDetails(cb) {
    var schema = {
        properties: {
            name: {
                required: true
            },
            platformUrl: {
                required: true
            },
            platformUseremail: {
                required: true
            },
            platformPassword: {
                required: true
            },
            cfOrganization: {
                required: true
            },
            cfSpace: {
                required: true
            },
            cfAppDomain: {
                default: 'null'
            },
            cfAppUrlScheme: {
                default: 'http'
            },
            defaultMaxSubscribersPerInstance: {
                default: 1,
                required: true,
                pattern: /^\d+$/
            },
            defaultMinSubscriptionCapacity: {
                default: 1,
                required: true,
                pattern: /^\d+$/
            },
            defaultMinimumInstanceAge: {
                default: 600,
                required: true,
                pattern: /^\d+$/
            },
            defaultMemorySizePerInstance: {
                default: 64,
                required: true,
                pattern: /^\d+$/
            },
            defaultDiskSizePerInstance: {
                default: 256,
                required: true,
                pattern: /^\d+$/
            },
            httpProxy: {
                default: "null",
                required: false
            },
            httpsProxy: {
                default: "null",
                required: false
            }
        }
    };
    prompt.get(schema, function (err, result) {
        cb(err, result);
    });
}

var update = function (arg, callback) {
    "use strict";
    if (arg) {
        repo.Clouds.find(arg, function (err, data) {
            if (data) {
                log.data(util.inspect(data));
                // NOTE: for testing CLI against non-unified provisioning
                // data = data.entity;
                var nullString = 'null';
                var originalHttpProxyValue;
                if (data.httpProxy === undefined) {
                    originalHttpProxyValue = null;
                } else {
                    originalHttpProxyValue = data.httpProxy;
                }
                var originalHttpsProxyValue;
                if (data.httpsProxy === undefined) {
                    originalHttpsProxyValue = null;
                } else {
                    originalHttpsProxyValue = data.httpsProxy;
                }
                var httpProxy = originalHttpProxyValue;
                var httpsProxy = originalHttpsProxyValue;
                if (httpProxy === null) {
                    httpProxy = nullString;
                }
                if (httpsProxy === null) {
                    httpsProxy = nullString;
                }
                var schema = {
                    properties: {
                        name: {
                            default: data.name,
                            required: false
                        },
                        platformUseremail: {
                            default: data.platformUseremail,
                            required: false
                        },
                        platformPassword: {
                            default: data.platformPassword,
                            required: false
                        },
                        defaultMaxSubscribersPerInstance: {
                            default: data.defaultMaxSubscribersPerInstance,
                            required: false,
                            pattern: /^\d+$/
                        },
                        defaultMinSubscriptionCapacity: {
                            default: data.defaultMinSubscriptionCapacity,
                            required: false,
                            pattern: /^\d+$/
                        },
                        defaultMinimumInstanceAge: {
                            default: data.defaultMinimumInstanceAge,
                            required: false,
                            pattern: /^\d+$/
                        },
                        defaultMemorySizePerInstance: {
                            default: data.defaultMemorySizePerInstance,
                            required: false,
                            pattern: /^\d+$/
                        },
                        defaultDiskSizePerInstance: {
                            default: data.defaultDiskSizePerInstance,
                            required: false,
                            pattern: /^\d+$/
                        },
                        httpProxy: {
                            default: httpProxy,
                            required: false,
                            before: function(value) {
                                var finalValue;
                                if (!value) {
                                    // no input from user, keep original value
                                    finalValue = originalHttpProxyValue;
                                } else if (value === nullString) {
                                    // user typed null
                                    // BUG (flatiron): finalValue = null would result into a runtime error
                                    // (TypeError: Cannot read property 'yellow' of null)
                                    // so going the usual route from here
                                    finalValue = "null";
                                } else {
                                    finalValue = value;
                                }
                                return finalValue;
                            }
                        },
                        httpsProxy: {
                            default: httpsProxy,
                            required: false,
                            before: function(value) {
                                var finalValue;
                                if (!value) {
                                    // no input from user, keep original value
                                    finalValue = originalHttpsProxyValue;
                                } else if (value === nullString) {
                                    // user typed null
                                    // BUG (flatiron): finalValue = null would result into a runtime error
                                    // (TypeError: Cannot read property 'yellow' of null)
                                    // so going the usual route from here
                                    finalValue = "null";
                                } else {
                                    finalValue = value;
                                }
                                return finalValue;
                            }
                        }
                    }
                };

                prompt.get(schema, function (err, result) {
                        if (err) {
                            callback(err);
                            return;
                        }

                        data.name = result.name;
                        data.platformUseremail = result.platformUseremail;
                        data.platformPassword = result.platformPassword;
                        data.defaultMaxSubscribersPerInstance = result.defaultMaxSubscribersPerInstance;
                        data.defaultMinSubscriptionCapacity = result.defaultMinSubscriptionCapacity;
                        data.defaultMemorySizePerInstance = result.defaultMemorySizePerInstance;
                        data.defaultDiskSizePerInstance = result.defaultDiskSizePerInstance;
                        if (result.httpProxy === "null") {
                            data.httpProxy = null;
                        } else {
                            data.httpProxy = result.httpProxy;
                        }
                        if (result.httpsProxy === "null") {
                            data.httpsProxy = null;
                        } else {
                            data.httpsProxy = result.httpsProxy;
                        }

                        // items that cannot be updated
                        data.platformUrl = null;
                        data.cfOrganization = null;
                        data.cfSpace = null;
                        data.cfAppDomain = null;
                        data.cfAppUrlScheme = null;
                        data.instanceStartTimeout = null;

                        // log.data(util.inspect(data));

                        // NOTE: for testing CLI against non-unified provisioning
                        // data = {entity:data};

                        repo.Clouds.update(arg, data, function (err, updatedData) {
                            if (!err && updatedData) {
                                // console.log(data);
                            }
                            callback(err, updatedData);
                        });
                    }
                );
            } else {
                return callback(new Error("Cloud id not found: " + arg));
            }
        });
    } else {
        return callback(new Error("Invalid cloud id: " + arg));
    }
};
exports.update = update;

var rm = function (arg, callback) {
    if (arg) {
        repo.Clouds.delete(arg, function (err, data) {
            if (data) {
                // console.log(data);
            }
            callback(err, data);
        });
        return;
    }
    var schema = {
        properties: {
            cloudId: {
                required: true
            }
        }
    };
    prompt.get(schema, function (err, result) {
        if (err) {
            callback(err);
            return;
        }

        var cloud = result.cloudId;
        repo.Clouds.delete(cloud, function (err, data) {
            if (data) {
                // console.log(data);
            }
            callback(err, data);
        });
    });
};
exports.rm = rm;

