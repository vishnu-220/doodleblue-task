var util = require('util'),
    events = require('events'),
    log = require('winston'),
    utils = require('./utils');

module.exports.ask = function(connection, args) {
	
    if (connection.state !== 'connected') {
        connection.emit('error', new Error('Could not execute ask command. Connection is not connected'));
        return;
    } else {    	
	    var attrs = {};
        var opts = {};
	    var options = args[args.length-1]; // options if any will be last argument
	    if (typeof options != 'string' && !(options instanceof Grammar)) {
		    opts = options || {};
		    attrs.mode = opts.mode;
		    attrs.voice = opts.voice;
		    attrs.bargein = opts.bargein;
		    attrs.attempts = opts.attempts;
		    attrs.recognizer = opts.recognizer;
		    attrs['min-confidence'] = opts.minConfidence;
		    attrs.sensitivity = opts.sensitivity;
		    attrs.terminator = opts.terminator;
		    attrs['initial-timeout'] = (opts.initialTimeout * 10000) / 10;
		    attrs['inter-digit-timeout'] = (opts.interDigitTimeout * 10000) / 10;
		    attrs['max-silence'] = (opts.maxSilence * 10000) / 10;
		    
		    args.pop();
	    }
	    
	    var connectionId = connection._rayo.connectionId;
		var askElement = connection._rayo.component('ask', connectionId, attrs);
	    var ask = new Ask(connection, opts);
	    
	    var promptElement = askElement.c('prompt');
		if (args) {
		    args.forEach(function(token) {
		    	if (typeof token === 'string') {
			        if ((token.length > 5) && 
			            (token.substring(0,5) == 'http:' || 
			             token.substring(0,6) == 'https:')) {
			    		promptElement.c('audio',{src:token});
			        } else {
			    		if (token.substring(0,6) == '<speak') {
			    			promptElement.t(token);
			    		} else {
			    			promptElement.c('p').t(token);    			
			    		}
			    	}
		    	}
		    });
		}	    
		var grammars = opts.choices;
		if (typeof grammars === 'string') {
			grammars = grammars.split(",");		
		} else if (typeof grammars == 'object' && !Array.isArray(grammars)) {
			grammars = [grammars];
		}
		ask.grammars = grammars;
		
	    grammars.forEach(function(grammar) {
	    	if (typeof grammar == 'string') {
	    		if ((grammar.length > 5) && 
			            (grammar.substring(0,5) == 'http:' || 
			             grammar.substring(0,6) == 'https:')) {
		        	askElement.c('grammar', {url:grammar});
		        } else {
		    		askElement.c('grammar', {'content-type':'application/grammar+voxeo'}).t(grammar);
		    	}
	    	} else {
	    		askElement.c('grammar', {'content-type':grammar.contentType})
	    		    .t('<![CDATA[' + grammar.content + ']]>');
	    	}
	    });
	    
	    
	    askElement.start(function (error, component) {
			var event = {
			        ask:ask,
			        call:connection.call,
			        subscriber:connection.call.subscriber
			};
	    	
	    	if (error) {
	    		event.error = error;
	    		ask.emit('error', event);
	    	} else {
	    		ask._component = component;
	    		component.on('error', function(error) {
	    			event.error = error;
	    			ask.emit('error', event);
	    		});
	            component.on('complete', function(elem) {
	            	if (elem.getChild('error') !== null) {
	            		event.error = new Error(elem.getChild('error').getText());
	            		ask.emit('error', event);
	            		return;
	            	} else {
		            	event.cause = elem.children[0].getName();
		            	if (elem.getChild('match') !== null) {
		            		//AMECHE-446
		            		var interpretation = elem.getChild('match').getChild('interpretation').getText();
		            		var utterance = elem.getChild('match').getChild('utterance').getText();
		            		event.result = ask.result = interpretation;
		            		event.utterance = ask.utterance = utterance;	            		
		            	}
		            	ask.emit('end', event);	            		
	            	}
	            });
		        ask.emit('start', event);
	    	}
	    });

	    return ask;
	}
};


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
var Ask = function(connection, opts) {
    this.connection = connection;
    this.grammars = null;
    if (opts.bargein !== undefined) {
    	opts.bargeIn = opts.bargein;
    } else if (opts.bargeIn !== undefined) {
    	opts.bargein = opts.bargeIn;
    }
    for (var key in opts) {
        utils.createGetter(this, key, opts);
    }    
}
;
//Mix in events
util.inherits(Ask, events.EventEmitter);

Ask.prototype.stop = function() {
	if (this._component) {
		this._component.stop();
	}
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function Grammar(contentType, content) {
	
	this.contentType = contentType;
	this.content = content;	
}

module.exports.Grammar = Grammar;