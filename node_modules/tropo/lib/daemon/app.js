/*global process*/

var flatiron = require('flatiron'),
    app = flatiron.app,
    fs = require('fs'),
    log = require('winston'),
    tropo = require('../tropo');

exports.run = function (arg, callback) {

    log.remove(log.transports.Console);
    log.add(log.transports.Console, {
        timestamp: (process.env.TROPO_LOG_TIMESTAMPS === null || process.env.TROPO_LOG_TIMESTAMPS == "true"), 
        level: 'info',
        colorize: true,
    });

    var appPath = arg;
    if (!("TROPO_IN_CLOUD_FOUNDRY" in process.env || "TROPO_IN_APCERA" in process.env)) {
        // Only needed when in VoxeoLab's PaaS
        // Argument must be the absolute path to the app

        if (!fs.existsSync(appPath)) {
            log.debug('No path to app. Assuming current directory.');
            appPath = '.';
        }
    }

    // Parse the transport config
    var transportConfig = {};
    try {
        transportConfig = JSON.parse(app.argv.transport);
    } catch (e) {
        log.debug('Could not parse transport configuration: ' + app.argv.transport + ". Using defaults.");
    }

    if (!transportConfig || transportConfig.type === null) {
        transportConfig.type = 'http';
        log.debug('Transport type not specified. Using: ' + transportConfig.type);
    }

    if (!transportConfig || transportConfig.listenAddress === null) {
        transportConfig.listenAddress = '0.0.0.0:5555';
        log.debug("Transport's listen address not specified. Using: " + transportConfig.listenAddress);
    }

    if (!transportConfig || transportConfig.rayoUrl === null) {
        transportConfig.rayoUrl = 'http://localhost:8080/rayo/ameche';
        log.debug('Rayo Url not specified. Using: ' + transportConfig.rayoUrl);
    }

    // Parse the rayo config
    var rayoConfig = {};
    try {
        rayoConfig = JSON.parse(app.argv.rayo);
    } catch (e) {
        log.debug('Could not parse rayo configuration: ' + app.argv.rayo + ". Using defaults.");
    }
    if (!rayoConfig || rayoConfig.callPingInterval === null) {
        rayoConfig.callPingInterval = '1800000'; // Ping calls each 30 minutes
        log.debug("Rayo's call ping interval not specified. Using: " + rayoConfig.callPingInterval);
    }
    if (!rayoConfig || rayoConfig.callPingAfter === null) {
        rayoConfig.callPingAfter = '1800000'; // Ping after 30 minutes by default
        log.debug("Rayo's ping time after offer not specified. Using: " + rayoConfig.callPingAfter);
    }
    if (!rayoConfig || rayoConfig.minDirectPingInterval === null) {
        rayoConfig.minDirectPingInterval = '30000'; // Direct ping only allowed 30 seconds after the latest one
        log.debug("Rayo's min direct ping interval not specified. Using: " + rayoConfig.minDirectPingInterval);
    }

    var defaultPermissions = [];
    if (app.argv.defaultPermissions !== undefined) {
	    // Parse default permissions if any. Default permissions are useful for development where we might
	    // not have a provisioning server running to query permissions on
	    try {
	        defaultPermissions = JSON.parse(app.argv.defaultPermissions);
	    } catch (e) {
	        log.debug('Could not parse default permissions: ' + app.argv.defaultPermissions + ". Using defaults.");
	    }
    }

    // Resolve and set the app revision id
    transportConfig.appRevisionId = app.argv.appRevisionId;
    transportConfig.sandboxURL = app.argv.sandboxURL;
    transportConfig.sandboxNumber = app.argv.sandboxNumber;

    // Initialize Tropo
    tropo.init({
        rayoTransportConfig: transportConfig,
        rayoConfig: rayoConfig,
        defaultPermissions: defaultPermissions
    });

    // Global exception handler
    tropo.on('error', function (error) {
        log.debug('Tropo Error: ' + error);
    });

    if (!("TROPO_IN_CLOUD_FOUNDRY" in process.env || "TROPO_IN_APCERA" in process.env)) {
        // app needs to be required only if launched in VoxeoLabs' PaaS,
        // but not in Cloud Foundry as it invokes the application directly
        log.debug('requiring', appPath);

        // Bootup the developer's app!
        try {
            require(appPath);
        } catch (e) {
            log.error('Could not find any app either on ' + arg + ' or in the current directory. Exiting.');
            log.error(e);
            process.exit(1);
        }
    }

};
