var util = require('util');

// Constructor
var AmecheUri = module.exports = function (uri) {
	
	return parseUri(uri);
};

var NUMBER = 'number';
var SIP = 'sip';

var uriRe = /^(\w+):([\w\-\.\!\~\*\'\(\)\&\=\+\$\,\;\?\/]+):?([\w\-\.\!\~\*\'\(\)\&\=\+\$\,]+)?@?([\w\.]+)?:?(\d+)?;?([\w=@;\.\-_]+)?\??([\S\s]+)?/;
var numberRe = /^\+?(\d[\d-]+)?$/;

function parseUri (value, parse) {

	var decodedUri = decodeURI(value);
    var match = uriRe.exec(decodedUri);

    if (!match) {
    	// Is a number? As part of connect
		// tel URIs can have dashes
		var number = numberRe.exec(value);
		if (number) {
			decodedUri = 'tel:' + decodedUri;
			match = uriRe.exec(decodedUri);
			if (!match) return {};
			
		} else {
			// is the Uri a sip address but does not start with sip. This is legacy but we should prevent this case anyways
			if (decodedUri.indexOf('@') !== -1 && !((decodedUri.substring(0,3) === 'sip:') || (decodedUri.substring(0,3) === 'sips:'))) {
				decodedUri = 'sip:' + decodedUri;
				match = uriRe.exec(decodedUri);
			} else {
				return {};
			} 
		}
    }

    var uri = {
	    'scheme': match[1] && match[1].toLowerCase(),
	    'user': match[4] && match[2] ,
	    'password': match[3],
	    'hostname': match[4] && match[4].toLowerCase() || match[2],
	    'port': match[5],
	    'params': match[6] || {}, 
	    'headers': match[7] || {}
    };
    
    var type = SIP;
	if (uri.scheme === 'tel' || (uri.params && typeof uri.params === 'string' && uri.params.indexOf('user=phone') !== -1)) {
		type = NUMBER;
	} else {
		if (!(uri.user && uri.hostname)) {
			if (numberRe.exec(decodedUri)) {
				type = NUMBER;
			}
		}
	}
	
	var address;
	if (uri.user) {
		address = uri.user + '@' + uri.hostname;
	} else {
		if (uri.hostname) {
			// As above, for tel uris content will be in the hostname field
			var semicolon = uri.hostname.indexOf(";");
			if (semicolon !== -1) {
				address = uri.hostname.substring(0, semicolon);
			} else {
				address = uri.hostname;
			}
		}
	}
	
	function toString() {
		return data.toURI();
	}
	
	function inspect() {
		return data.toString();
	}
	
	var data = {
		toURI : function() {
			return decodedUri;
		},
		toString : toString,
		inspect : inspect
	};
	
	Object.defineProperties(data, {
	    value: {
	      get: function(){ return address; }
	    },
	    type: {
	      get: function(){ return type; }
	    }
	});
	
	return data;
}