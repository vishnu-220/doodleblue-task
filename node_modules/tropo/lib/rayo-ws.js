var log = require('winston'),
    util = require('util'),
    events = require('events'),
    parseXml = require('./utils.js').parseXml;


// Transport Implementation
// ====================================================================

var Transport = module.exports = function (config, tropo) {
    if (config.rayoAddress !== null) {
        config.rayoUrl = config.rayoAddress;
    }
    this.config = config;
    this.tropo = tropo;
    log.debug('Transport Config', config);
};

// Mix in eventing
util.inherits(Transport, events.EventEmitter);

Transport.prototype.start = function () {

    var transport = this;

    // Bind to the 'app' namespace
    var sandboxConnectionURL = transport.config.sandboxURL + "/app";

    var socket = this.socket = require('socket.io-client')(sandboxConnectionURL);

    socket.on('connect', function(){
        //var sandboxNumber = transport.config.sandboxNumber;
        socket.emit('bind', {
            username: process.env.TROPO_SANDBOX_USERNAME,
            password: process.env.TROPO_SANDBOX_PASSWORD
        }, function(err, number) {
            if(err) {
                log.error("Error connecting to Tropo Sandbox", err.message);
                process.exit();
            }
            log.info('Connected to Tropo Sandbox', {
                number: number
            });
        });
    });

    socket.on('disconnect', function(){
        log.info('Disconnected from Tropo Sandbox');
    });

    socket.on('callEvent', function(event, cb){
        parseXml(event.body, function(err, result) {
            if(err) {
                log.error('Error parsing', event.body);
                transport.emit('error', err);
            }
            else {
                log.debug('(i)', event.body.replace('<?xml version="1.0"?>',''));
                event.body = result;
                transport.emit('callEvent', event);
            }
        });
    });

};

Transport.prototype.send = function (command, callback) {

    var oldBody = command.body;
    command.body = oldBody.toString();

    log.debug('(o)', command.body.replace('<?xml version="1.0"?>',''));

    this.socket.emit('callCommand', command, function handleCallCommand(response) {

        try {

            // Replace body for xml2js object
            command.body = oldBody;

            if(!response) {
                return callback(null, null);
            }

            // If XML (gross)
            if(response.indexOf('<') === 0) {
                parseXml(response, function parseCommandResponse(err, xml) {
                    if(err) {
                        log.error('Failed to parse response: ' + response);
                        callback(new Error('Failed to parse response: ' + response));
                    }
                    else {
                        log.debug('(r)', response.replace('<?xml version="1.0"?>',''));
                        callback(null, xml);
                    }
                });             
            }
            // If not then it's an error
            else {
                log.error('(r)', response);
                callback(new Error(response));
            }           
        }
        catch (ex) {
            log.error('Exception processing call command response ', ex.message);
        }

    });

};