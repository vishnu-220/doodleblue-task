var Rayo = require('../lib/rayo')
var util = require('util');
var events = require('events');
var Tropo = require('../lib/tropo-impl');
var MockTransport = require('../lib/rayo-mock');
var fs = require('fs');
var http = require('http');
var XmlElement = require('../lib/utils').XmlElement;

var http = require('http');
var formidable = require('formidable');

var tropo = null;
var transport = null;
var recording = null;

var defaultCallId = 'foocall';
var defaultConnectionId = 'fooconn';
var defaultTo = 'tel:+555';
var defaultFrom = 'tel:+666';

var server = null;
var serverSocket = null;

/**
 * This test tries to simulate the closes to what a customer is trying to do which 
 * is to use request to post recordings to an external http server.
 */
module.exports = {

    setUp : function(callback) {
    	
        var transportConfig = {
            type : 'mock'
        };
        var rayoConfig = {
        	callPingInterval : '5000'
        };

        tropo = new Tropo();
        tropo.debug = true;
        
        // Initialize Tropo
        tropo.init({
            rayoTransportConfig : transportConfig,
            rayoConfig: rayoConfig,
            defaultPermissions: ['CALL_RING_LIST']
        });
        transport = tropo.mockTransport;
    	    	
        callback();
    },
    tearDown: function(callback) {
    	
    	console.log('Tearing down test');
    	if (tropo != null) {
    		tropo.shutdown();
    	}
    	if (server != null) {
    		console.log('Shutting down server');
    		serverSocket.destroy();
    		server.close();
    	}
    	callback();
    },
    'Recorded file can be read. End event on stream.' : function(test) {
    	
    	console.log('Starting web server');
        server = http.createServer(function(req,res){
	    	console.log('Received upload request');
	    	
	        var form = new formidable.IncomingForm();
	
	        form.parse(req, function(err, fields, files) {
	        	console.log('Fields: ' + util.inspect(fields));
	        	console.log('Files: ' + util.inspect(files));
	        	
	        	test.equals(files['file'].size, recording.size);
	        	
	            res.end();
	            console.log('Setting test status to done');
	            test.done();
	            console.log('Tear down complete');
	        });
        });
        server.on('connection', function (socket) {
        	console.log('Storing server socket');
        	serverSocket = socket;
        });
        server.listen(63000);

        test.expect(3);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                recording = call.record();
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'size':'75648', 'duration':'13000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		})
                
            	recording.on('end', function() {
                	console.log('Recording finished');
                	var stream = recording.createReadStream();
                	console.log('Preparing form');
                	var FormData = require('form-data');
                	var form = new FormData();
                	form.append('api_key', "123456");
                	form.append('product_id', 19);

                	form.append('file', stream, {
                	  filename: 'unicycle.jpg',
                	  contentType: 'image/jpg',
                	  knownLength: 240058
                	});
                	console.log('Sending form');
                	form.submit('http://localhost:63000', function(err, res) {
                	    if (err) {
                	    	console.log('Error: ' + err);
                	    	throw err;
                	    }
                	    console.log('Done');
                	});
                	
            	});			                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
};

function rayoEvent(event) {
	
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var componentId = null;
    if (event.callId) {
        callId = event.callId;
    } 
    if (event.connectionId) {
    	connectionId = event.connectionId;
    }
    if (event.componentId) {
        componentId = event.componentId;
    } 
    console.log('event', event.body.toString());
    transport.emit('callEvent', {
        callId : callId,
        connectionId : connectionId,
        componentId : componentId,
        body : event.body
    });
};

function newCall(options) {
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var direction = 'in';
    if (options) {
        if (options.callId) {
            callId = options.callId;
        }
        if (options.connectionId) {
        	connectionId = options.connectionId;
        }
        if (options.direction) {
            direction = options.direction;
        }
    }
    
    transport.emit('callEvent', {
        callId : callId,
        connectionId : connectionId,
        body : new XmlElement('offer', {
            to : defaultTo,
            from : defaultFrom,
            'direction' : direction
        })
    });
};
