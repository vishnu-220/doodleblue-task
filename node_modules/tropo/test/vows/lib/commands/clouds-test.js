

var assert = require('assert'),
    cli = require('../../../../lib/cli'),
    nock = require('nock'),
    path = require('path'),
    vows = require('vows');
	
var conf = cli.config;
conf.stores.file.file = path.join(__dirname, '..', '..', 'resources', 'dummy-tropoconf');
conf.stores.file.loadSync();

var common = require('../common');
var cli = common.cli;
var prompt = cli.prompt;

var dummyHost = 'http://api.example.com';
var basePath = '/repo';

var makeTopic = common.makeTopic;
var makeTest = common.makeTest;

vows.describe('lib/commands/clouds').addBatch({
    'add bad private key' : makeTest({
        argv : ['clouds','add'],
        setup : function() {
            prompt.override.name = 'fooname';
            prompt.override.accessKey = 'foo';
            prompt.override.secretKey = 'foo';
            prompt.override.style = 'foo';
            prompt.override.initScriptLocalPath = 'foo';
            prompt.override.initScriptRemotePath = 'foo';
            prompt.override.defaultSecurityGroup = 'foo';
            prompt.override.defaultImageId = 'foo';
            prompt.override.defaultInstanceType = 'foo';
            prompt.override.username = 'foo';
            prompt.override.privateKeyName = 'foo';
            prompt.override.privateKeyPath = 'foo';
            prompt.override.defaultInstanceDeployPath = 'foo';
            prompt.override.automaticAppInstanceCreationEnabled = 'Y';
            prompt.override.rayoUrl = 'foo';
            prompt.override.defaultAppInstanceTransport = 'HTTP';
            prompt.override.defaultAppInstancePort = '80';
            prompt.override.minimumWarmPoolSize = '5';
            prompt.override.maximumWarmPoolSize = '10';
            prompt.override.deleteTerminatedVirtualMachinesAfterMinutes = '22';
            prompt.override.repoUrl = 'foo';
        },
        assertions : {
            'got error' : function(err) {
                assert.ok(!!err);
            }
        }
    }),
    'add works' : makeTest({
        argv : ['clouds','add'],
        setup : function() {
            prompt.override.name = 'fooname';
            prompt.override.accessKey = 'foo';
            prompt.override.secretKey = 'foo';
            prompt.override.style = 'foo';
            prompt.override.initScriptLocalPath = path.join(__dirname, '..', '..', 'resources', 'dummy-initscript');
            prompt.override.initScriptRemotePath = 'foo';
            prompt.override.defaultSecurityGroup = 'foo';
            prompt.override.defaultImageId = 'foo';
            prompt.override.defaultInstanceType = 'foo';
            prompt.override.username = 'foo';
            prompt.override.privateKeyName = 'foo';
            prompt.override.privateKeyPath = path.join(__dirname, '..', '..', 'resources', 'dummy-privatekey');
            prompt.override.defaultInstanceDeployPath = 'foo';
            prompt.override.automaticAppInstanceCreationEnabled = 'Y';
            prompt.override.rayoUrl = 'foo';
            prompt.override.defaultAppInstanceTransport = 'HTTP';
            prompt.override.defaultAppInstancePort = '80';
            prompt.override.minimumWarmPoolSize = '5';
            prompt.override.maximumWarmPoolSize = '10';
            prompt.override.deleteTerminatedVirtualMachinesAfterMinutes = '22';
            prompt.override.repoUrl = 'foo';
            
            var payload = {entity : {                    
                name : prompt.override.name,
                style : prompt.override.style,
                accessKey : prompt.override.accessKey,
                secretKey : prompt.override.secretKey,
                defaultSecurityGroup : prompt.override.defaultSecurityGroup,
                username : prompt.override.username,
                privateKeyName : prompt.override.privateKeyName,
                privateKey : 'foo',
                initScript : 'foo',
                initScriptRemotePath : prompt.override.initScriptRemotePath,
                defaultInstanceType : prompt.override.defaultInstanceType,
                defaultImageId : prompt.override.defaultImageId,
                defaultInstanceDeployPath : prompt.override.defaultInstanceDeployPath,
                automaticAppInstanceCreationEnabled : true,
                defaultAppInstanceTransport : prompt.override.defaultAppInstanceTransport,
                defaultAppInstancePort : 80,
                rayoAddress : prompt.override.rayoUrl,
                minimumWarmPoolSize : parseInt(prompt.override.minimumWarmPoolSize),
                maximumWarmPoolSize : parseInt(prompt.override.maximumWarmPoolSize),
                deleteTerminatedVirtualMachinesAfterMinutes : 
                    parseInt(prompt.override.deleteTerminatedVirtualMachinesAfterMinutes),
                repoUrl : prompt.override.repoUrl
            }};
            nock(dummyHost)
                .post(basePath + '/clouds',JSON.stringify(payload)).reply(200, { 

                });
            
        }
    })
}).export(module, { error : false });
