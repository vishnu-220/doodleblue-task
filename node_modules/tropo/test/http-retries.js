var Rayo = require('../lib/rayo')
var util = require('util');
var events = require('events');
var request = require('request');
var http = require('http');
var XmlElement = require('../lib/utils').XmlElement;
var parseXml = require('../lib/utils').parseXml;
var testServers = require('../test/util/testServers').TestServers;

var client = null;
var listenAddress='localhost:62000';

process.on('uncaughtException', function(err) {
	console.log('Caught exception: ', err, err.stack);
	process.exit(1);
});

process.env.HTTP_RETRIES = 3;
process.env.HTTP_TIMEOUT_RETRIES = 3;

var Transport = require('../lib/rayo-http.js'); 
var transport = new Transport({rayoAddress:'http://localhost:43443', listenAddress:listenAddress});

client = new Rayo({}, transport);

module.exports = {

   setUp: function(callback) {
      testServers.start();  
      callback();
   },
   
   tearDown: function(callback) {
	   callback();
   },

   'Test retries on network error': function(test) {

      test.expect(2);
      test.ok(client);
      
      var command = client.command("continue");
      command.send(function(err, res) {
    	  console.log('Error: ' + util.inspect(err));
    	  console.log('Response: ' + util.inspect(res));
    	  test.equals(err.retries, 3);
    	  test.done();
      });      
   },

   'Test retries on service unavailable': function(test) {

	  // 503 is the standard code for flagging an overloaded server
	   
      test.expect(3);
      test.ok(client);
      
      var command = client.command("continue");
      transport.config.rayoUrl = "http://0.0.0.0:62001";
      console.log('Url: ' + command.rayoUrl);
      command.send(function(err, res) {
    	  console.log('Error: ' + util.inspect(err));
    	  console.log('Response: ' + util.inspect(res));
    	  test.equals(err.retries, 3);
    	  test.equals(err.code, 503);
    	  test.done();   	   	  
      });      
   },
   
   'Test retries no retries on error other than 503': function(test) {
	   
      test.expect(3);
      test.ok(client);
      
      var command = client.command("continue");
      transport.config.rayoUrl = "http://0.0.0.0:62003"; 
      console.log('Url: ' + command.rayoUrl);
      command.send(function(err, res) {
    	  console.log('Error: ' + util.inspect(err));
    	  console.log('Response: ' + util.inspect(res));
    	  test.equals(err.retries, 0);
    	  test.equals(err.code, 404);
    	  test.done();
      });      
   },
   
   'Test retries with default timeout': function(test) {

	  // default timeout is 5 seconds
	   
      test.expect(4);
      test.ok(client);
      
      var command = client.command("continue");
      transport.config.rayoUrl = "http://0.0.0.0:62002"; 
      console.log('Url: ' + command.rayoUrl);
      var tstart = process.hrtime();
      command.send(function(err, res) {
    	  console.log('Error: ' + util.inspect(err));
    	  console.log('Response: ' + util.inspect(res));
    	  test.equals(err.retries, 3);
    	  test.ok(err.code == 'ETIMEDOUT' || err.code == 'ESOCKETTIMEDOUT'); //changes from OS X to Linux
    	  var tend = process.hrtime(tstart);
    	  console.log("Interval: " + (tend[0]));
    	  test.equals(tend[0],23); // 1st request + 3 retries + 3s from retryIntervals = 23s  
    	  test.done();
      });      
   },	
   
   'Test retries with shorter timeout': function(test) {

	  // will use 1 second	   
      test.expect(3);
      test.ok(client);
      
      var command = client.command("continue");
      transport.config.rayoUrl = "http://0.0.0.0:62002";
      transport.timeout = 1000; 
      console.log('Url: ' + command.rayoUrl);
      var tstart = process.hrtime();
      command.send(function(err, res) {
    	  console.log('Error: ' + util.inspect(err));
    	  console.log('Response: ' + util.inspect(res));
    	  test.equals(err.retries, 3);
    	  var tend = process.hrtime(tstart);
    	  console.log("Interval: " + (tend[0]));
    	  test.equals(tend[0],7); // 1st request + 3 retries + 3s from retryIntervals = 7s  
    	  test.done();
      });      
   },	   
   
   'Test retries different retry interval': function(test) {

      test.expect(3);
      test.ok(client);
      
      var command = client.command("continue");
      transport.config.rayoUrl = "http://0.0.0.0:62002";
      transport.timeout = 1000; 
      transport.retryInterval = 3000; 
      console.log('Url: ' + command.rayoUrl);
      var tstart = process.hrtime();
      command.send(function(err, res) {
    	  console.log('Error: ' + util.inspect(err));
    	  console.log('Response: ' + util.inspect(res));
    	  test.equals(err.retries, 3);
    	  var tend = process.hrtime(tstart);
    	  console.log("Interval: " + (tend[0]));
    	  test.equals(tend[0],13); // 1st request + 3 retries + 9s from retryIntervals = 13s  
    	  test.done();
      });      
   },	   

   'Test retries different max retries': function(test) {

      test.expect(3);
      test.ok(client);
      
      var command = client.command("continue");
      transport.config.rayoUrl = "http://0.0.0.0:62002";
      transport.timeout = 1000; 
      transport.retryInterval = 1000; 
      transport.maxRetries = 2; 
      console.log('Url: ' + command.rayoUrl);
      var tstart = process.hrtime();
      command.send(function(err, res) {
    	  console.log('Error: ' + util.inspect(err));
    	  console.log('Response: ' + util.inspect(res));
    	  test.equals(err.retries, 2);
    	  var tend = process.hrtime(tstart);
    	  console.log("Interval: " + (tend[0]));
    	  test.equals(tend[0],5); // 1st request + 2 retries + 2s from retryIntervals = 5s  
    	  test.done();
      });      
   },	  
   
   'Test retries resend same smid': function(test) {

      test.expect(7);
      test.ok(client);
      
      transport.timeout = 1000; 
      transport.retryInterval = 1000; 
      transport.maxRetries = 3; 

	  // will use 1 second
	  var serverLazy = http.createServer(function (req, res) {
          var headers = req.headers;
          test.equals(headers['smid'],1);
		//res.end();
	  });
	  serverLazy.listen(62004);
	  
	  var handler = function(call) {
	      var command = call.command("continue");
	      transport.config.rayoUrl = "http://0.0.0.0:62004";
	      transport.timeout = 1000; 
	      console.log('Url: ' + command.rayoUrl);
	      var tstart = process.hrtime();
	      command.send(function(err, res) {
	    	  console.log('Error: ' + util.inspect(err));
	    	  console.log('Response: ' + util.inspect(res));
	    	  test.equals(err.retries, 3);
	    	  var tend = process.hrtime(tstart);
	    	  console.log("Interval: " + (tend[0]));
	    	  test.equals(tend[0],7); // 1st request + 3 retries + 3s from retryIntervals = 7s  
	    	  test.done();
	   	   	  
	    	  client.removeListener('offer',handler); // for test cleaning
	    	  serverLazy.close();
	      });      		  
	  };
	  client.on('offer', handler);
      newCall('foo','bar',"http://0.0.0.0:62004");	         
   },
   
   'Test retries send retry header': function(test) {

      test.expect(3);
      
      transport.timeout = 1000; 
      transport.retryInterval = 1000; 
      transport.maxRetries = 3; 

      var retryAttempt = 0;
      // will use 1 second
      var serverLazy = http.createServer(function (req, res) {
          var headers = req.headers;
          if (headers['http-retry']) {
              retryAttempt++;
              test.equals(headers['http-retry'], retryAttempt.toString())
          }
          //res.end();
      });
      serverLazy.listen(62005);
      
      var handler = function(call) {
          var command = call.command("continue");
          transport.config.rayoUrl = "http://0.0.0.0:62005";
          transport.timeout = 1000; 
          console.log('Url: ' + command.rayoUrl);
          var tstart = process.hrtime();
          command.send(function(err, res) {
              test.done();              
              client.removeListener('offer',handler); // for test cleaning
              serverLazy.close();
          });             
      };
      client.on('offer', handler);
      newCall('foo','bar',"http://0.0.0.0:62005", '1');          
   },   
	   
   'Global dispose': function(test) {

       // Dirty dirty dirty, but:
       // - nodeunit has no way to do global tests
       // - don't have time to integrate grunt right now
       // jenkins refuse to dispose sockets gracefully so I have to create the servers just once and keep them open
       // :'(
       
	   if (client) {
		   console.log('Disposing');
		   client.dispose();
		   //transport.stop();
		   try {
		     transport._server.close();
		   } catch (e) {}
		   transport.removeAllListeners('callEvent');
	   }
	   testServers.end();
	   test.done();
   }
};

   
function send(headers, body, callback) {

	console.log('Sending message ' + body);
    request.post({
        headers: headers,
        url: 'http://'+listenAddress,
        body: body}, function(err, res, body){
		    if (callback) {
		    	callback(err,res);
		    }
        });
};

function newCall(callId, connectionId, rayoUrl) {

	var defaultTo = 'tel:+555';
	var defaultFrom = 'tel:+666';
    var body = new XmlElement('offer', {
        to : defaultTo,
        from : defaultFrom,
        'direction' : 'in',
    });

	var subscription = body.c('subscription');
	subscription.c('address').t(defaultTo);
	subscription.c('permission', {name:'CALL_RING_LIST'});
	subscription.c('permission', {name: 'CALL_RECORD'});
	subscription.c('priority').t('1');
	subscription.c('required').t('true');

    client.transport.emit('callEvent', {
      callId: callId ? callId : 'foo',
      connectionId: connectionId ? connectionId : 'bar',    		  
      rayoUrl: rayoUrl ? rayoUrl : 'http://localhost:8080/rayo/tropo',
      body: body
    });
};
