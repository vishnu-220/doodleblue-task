var Rayo = require('../lib/rayo')
var util = require('util');
var events = require('events');
var Tropo = require('../lib/tropo-impl');
var MockTransport = require('../lib/rayo-mock');
var fs = require('fs');
var XmlElement = require('../lib/utils').XmlElement;

var tropo = null;
var transport = null;

var defaultCallId = 'foocall';
var defaultConnectionId = "fooconn";
var defaultTo = 'tel:+555';
var defaultFrom = 'tel:+666';

process.on('uncaughtException', function(err) {
  console.error(err.stack);
});

module.exports = {

    setUp : function(callback) {
        var transportConfig = {
            type : 'mock'
        };
        var rayoConfig = {
        	callPingInterval : '5000'
        };

        tropo = new Tropo();
        tropo.debug = true;
        
        // Initialize Tropo
        tropo.init({
            rayoTransportConfig : transportConfig,
            rayoConfig: rayoConfig
        });
        transport = tropo.mockTransport;
        callback();
    },
    tearDown: function(callback) {
    	process.nextTick(function() {
    		console.log("Shutting down Tropo");
        	tropo.shutdown();
        	callback();
    	});
    }, 

    'Incoming call fires' : function(test) {
        test.expect(7);
        tropo.on('call:incoming', function(event) {
            var subscriber = event.subscriber;            
        	var call = event.call;
            test.ok(call.id);
            test.strictEqual(call.subscriber, subscriber);
            test.equals(call.direction,'in');
            test.equals(call.to.toURI(), defaultTo);
            test.equals(call.from.toURI(), defaultFrom);
            test.equals(call.connections.length, 1);
            test.equals(call.connections[0].state, 'initial');
                        
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
    },
    
    'Outgoing call fires' : function(test) {
        test.expect(7);
        tropo.on('call:outgoing', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            test.equals(call.to.toURI(), defaultTo);
            test.equals(call.from.toURI(), defaultFrom);
            test.strictEqual(call.subscriber, subscriber);
            test.equals(call.direction,'out');
            test.equals(call.connections.length, 1);
            test.equals(call.connections[0].state, 'initial');
        	console.log('got outgoing event 2: ' + event);
            
            process.nextTick(function() {
            	console.log('got outgoing event 3: ' + event);
                transport.next(function(command, callback) { }); // connect
            	console.log('got outgoing event 4: ' + event);
                test.done();
            });
        });
        newCall({ direction : 'out',subscriber: defaultFrom,permissions: ['CALL_RING_LIST'] });
    },    
     
    'Call end fires does not fire when received all invididual leg end events' : function(test) {
        test.expect(1);
        tropo.on('call:end', function(event) {
            // Should never get here
            test.ok(false, 'Global Tropo Call end should not have been triggered')
        });
        var disconnections = 0;
        tropo.on('call:connected', function(event) {
            event.call.connections.forEach(function(conn) {
                console.log('Adding the end event to the connection object');
                conn.on('disconnected', function(event) {
                    console.log('Got the end event!!');
                    disconnections++;
                    if (disconnections == 2) {
                        setTimeout(function() {
                            // After one second we never got the call:end, good
                            test.ok(true);
                            test.done();
                        }, 1000);
                    }
                });
            });
            rayoEvent({
                connectionId : blegId,
                body: new XmlElement('end')
            });
            rayoEvent({
                connectionId : defaultConnectionId,            
                body: new XmlElement('end')
            });            
        });        
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
                           
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
        rayoEvent({
            connectionId : blegId,
            body: new XmlElement('joined')
        });
    },     
     
    'Call end fires' : function(test) {
        test.expect(5);
        tropo.on('call:end', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.equals(defaultCallId, call.id);
            test.equals(call.to.toURI(), defaultTo);
            test.equals(call.from.toURI(), defaultFrom);
            test.strictEqual(call.subscriber, subscriber);
            test.equals(event.reason, 'hangup');
            console.log('Test done');
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
        	connectionId : blegId,
            body: new XmlElement('end')
        });
        rayoEvent({
            connectionId : defaultConnectionId,            
            body: new XmlElement('end')
        });        
        rayoEvent({
            connectionId : 'null', // Forces a global call end           
            body: new XmlElement('end').c('hangup').up()
        });        
    },  
    
    'Outbound call connected fires' : function(test) {
        test.expect(1);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            test.done();
        });
        newCall({ type : 'out',subscriber: defaultFrom, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
        rayoEvent({
            connectionId : blegId,
            body: new XmlElement('joined')
        });
    },
  
    'Inbound call auto-connects' : function(test) {
        test.expect(3);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.equals(call.autoConnect,true);
            test.equals(call.continueSent,false);
            call.on('end',function(endEvent) { 
                test.equals(call.continueSent,true);
                test.done();
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('end')
        });        
        rayoEvent({
        	connectionId : blegId,
            body: new XmlElement('end')
        });
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });
    },
    'Inbound call does not auto-connect when no ringlist permission' : function(test) {
        test.expect(3);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.equals(call.autoConnect,true);
            test.equals(call.continueSent,false);
            call.on('end',function(endEvent) { 
                test.equals(call.continueSent,false);
                test.done();
            });
        });
        newCall({subscriber:defaultTo});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('end')
        });        
        rayoEvent({
        	connectionId : blegId,
            body: new XmlElement('end')
        });
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });
    },

    'Outbound call auto-connects' : function(test) {
        test.expect(3);
        tropo.on('call:outgoing', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.equals(call.autoConnect,true);
            test.equals(call.continueSent,false);
            call.on('end',function(endEvent) { 
                test.equals(call.continueSent,true);
                test.done();
            });
        });
        newCall({ direction : 'out' , subscriber: defaultFrom, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('end')
        });        
        rayoEvent({
        	connectionId : blegId,
            body: new XmlElement('end')
        });
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });
    },

    'Outbound call does not auto-connect when no ringlist permission' : function(test) {
        test.expect(3);
        tropo.on('call:outgoing', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.equals(call.autoConnect,true);
            test.equals(call.continueSent,false);
            call.on('end',function(endEvent) { 
                test.equals(call.continueSent,true);
                test.done();
            });
        });
        newCall({ direction : 'out' , subscriber: defaultFrom, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('end')
        });        
        rayoEvent({
        	connectionId : blegId,
            body: new XmlElement('end')
        });
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });
    },
    
    
    'Inbound call does NOT auto-connect' : function(test) {
        test.expect(2);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.equals(call.continueSent,false);
            call.autoConnect = false;
            call.on('end',function(endEvent) { 
                test.equals(call.continueSent,false);
                test.done();
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            connectionId: 'null',
            body: new XmlElement('end')
        });
    },

    'Outbound call does NOT auto-connect' : function(test) {
        test.expect(2);
        tropo.on('call:outgoing', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.equals(call.continueSent,false);
            call.autoConnect = false;
            call.on('end',function(endEvent) { 
                test.equals(call.continueSent,false);
                test.done();
            });
        });
        newCall({ direction : 'out' , subscriber: defaultFrom, permissions: ['CALL_RING_LIST']});
        rayoEvent({
            connectionId: 'null',
            body: new XmlElement('end')
        });
    },
    
    'Connect inbound call fails - rejected' : function(test) {
        test.expect(1);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            call.reject();
            test.throws(function() { 
                call.connect();
            }, Error);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
    
    'Reject inbound call' : function(test) {
        test.expect(1);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            call.reject();
        });
        transport.send = function(command) {
            test.equals(command.body.getName(), 'reject', 'Unexpected Element Name');
            test.done();
        }
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
    'Connect outbound call fails - rejected' : function(test) {
        test.expect(1);
        tropo.on('call:outgoing', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            call.reject();
            test.throws(function() { 
                call.connect();
            }, Error);
            test.done();
        });
        newCall({ direction : 'out' , subscriber: defaultFrom, permissions: ['CALL_RING_LIST']});
    },
    
    'Reject outbound call' : function(test) {
        test.expect(1);
        tropo.on('call:outgoing', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            call.reject();
        });
        transport.send = function(command) {
            test.equals(command.body.getName(), 'reject', 'Unexpected Element Name');
            test.done();
        }
        newCall({ direction : 'out' , subscriber: defaultFrom, permissions: ['CALL_RING_LIST']});
    },
    
    'Reject throws error when fails' : function(test) {
        test.expect(4);
        tropo.on('call:incoming', function(event) {
            var subscriber = event.subscriber;
            var call = event.call;
            call.on('error', function(err) {
                test.ok(err);
                test.equals(err.call, call);
                test.equals(err.subscriber, subscriber);
                test.equals(err.error.code, 409);
                test.done();
            });
            
            call.reject();
            transport.send = function(command, callback) {
                var error = new Error("Server conflict. Cannot reject");
                error.code = 409;
                callback(error, null);
            }            
        });
        
        transport.send = function(command) {
            test.equals(command.body.getName(), 'reject', 'Unexpected Element Name');
            test.done();
        }
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },      
    'Connect succeeds' : function(test) {
        var addies = ['sip:a@tropo.com','sip:b@tropo.com', 'sip:c@tropo.com'];

        test.expect(10);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(addies.length, command.body.children.length, 'Wrong number of connect targets');

                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                
                addies.forEach(function(addy) { 
                	test.notEqual(-1, indexOf(targets,addy), 'Address not found in connect targets');
                });
                
                test.done();
            }
            
            var conn = call.connect(addies);
            test.ok(conn);
            var ringlistItems = conn.ringlist.sort();
            var addiesItems = addies.sort();
            for(var i=0;i<ringlistItems.length;i++) {
            	test.equals(ringlistItems[i].toURI(), addies[i]);
            }
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
    
    'Connect with string succeeds' : function(test) {
        var addy = 'sip:foo@tropo.com'

        test.expect(7);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(1, command.body.children.length, 'Wrong number of connect targets');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                test.notEqual(-1, indexOf(targets,addy), 'Address not found in connect targets');
            }
            
            var conn = call.connect(addy);
            test.ok(conn);
            test.equals(conn.ringlist.length, 1);
            test.equals(conn.ringlist[0].toURI(),addy);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
   
    'Connect with no arguments succeeds' : function(test) {
        test.expect(7);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'continue', 'Unexpected Element Name');
                test.equals(0, command.body.children.length, 'Wrong number of connect targets');
            }
            
            var conn = call.connect();
            test.ok(conn);
            test.equals(1,conn.ringlist.length);
            test.equals(Object.keys(call.rayo.tropoCalls).length,1); // related with two failure connect tests below
            test.equals(defaultTo,conn.ringlist[0].toURI());
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },    
    'Connect with options succeeds' : function(test) {
        var addies = ['sip:a@tropo.com','sip:b@tropo.com','sip:c@tropo.com'];

        test.expect(12);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(addies.length, command.body.children.length, 'Wrong number of connect targets');
                test.equals(command.body.attrs['bridge'], 'true', 'Unexpected attribute value');
                test.equals(command.body.attrs['callerId'], '+123456789', 'Unexpected attribute value');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                
                addies.forEach(function(addy) { 
                	test.notEqual(-1, indexOf(targets,addy), 'Address not found in connect targets');
                });
            }
            
            var conn = call.connect(addies, {bridge:true, callerId:"+123456789"});
            test.ok(conn);
            var ringlistItems = conn.ringlist.sort();
            var addiesItems = addies.sort();
            for(var i=0;i<ringlistItems.length;i++) {
            	test.equals(ringlistItems[i].toURI(), addies[i]);
            }
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },    
    'Connect with string and options succeeds' : function(test) {
        var addy = 'sip:foo@tropo.com'

        test.expect(9);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(1, command.body.children.length, 'Wrong number of connect targets');
                test.equals(command.body.attrs['bridge'], 'true', 'Unexpected attribute value');
                test.equals(command.body.attrs['callerId'], '+123456789', 'Unexpected attribute value');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                
                test.notEqual(-1, targets.indexOf(addy), 'Address not found in connect targets');
            }
            
            var conn = call.connect(addy, {bridge:true, callerId:'+123456789'});
            test.ok(conn);
            test.equals(conn.ringlist.length, 1);
            console.log('a ringlist: ' + util.inspect(conn.ringlist));
            test.equals(conn.ringlist[0].toURI(),addy);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },    
    
    'Connect with no arguments and options succeeds' : function(test) {
        test.expect(9);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'continue', 'Unexpected Element Name');
                test.equals(0, command.body.children.length, 'Wrong number of connect targets');
                test.equals(command.body.attrs['bridge'], 'true', 'Unexpected attribute value');
                test.equals(command.body.attrs['callerId'], '+123456789', 'Unexpected attribute value');
            }
            
            var conn = call.connect({bridge:true, callerId:'+123456789'});
            test.ok(conn);
            test.equals(1,conn.ringlist.length);
            test.equals(Object.keys(call.rayo.tropoCalls).length,1); // related with two failure connect tests below
            test.equals(defaultTo,conn.ringlist[0].toURI());
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },    

    'Connect times out' : function(test) {
        var addies = ['sip:a@tropo.com','sip:b@tropo.com', 'sip:c@tropo.com'];

        test.expect(6);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
        	call.on('error', function(err) {
        	   test.equals(err.call, call);
        	   test.equals(err.subscriber, subscriber);
        	   test.equals(err.error.code, 409);
        	   test.equals(err.error.message, "Server conflict. Connect timed out");
        	   test.done();
        	});
            transport.send = function(command, callback) {
            	var error = new Error("Server conflict. Connect timed out");
            	error.code = 409;
				callback(error, null);
				test.ok(true);
                test.equals(Object.keys(call.rayo.tropoCalls).length,0)
            }            
            var conn = call.connect(addies);
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },

    'Connect fails' : function(test) {
        var addies = ['sip:a@tropo.com','sip:b@tropo.com', 'sip:c@tropo.com'];

        test.expect(9);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
        	var conn;
        	var rayo = call.rayo;
            transport.send = function(command, callback) {
                test.equals(call.connections.length, 2);
                test.equals(conn.state, 'initial');
            	var error = new Error("Server conflict. Connect timed out");
            	error.code = 500;
            	call.on('error', function(err) {
            	   test.equals(call, err.call);
            	   test.equals(subscriber, err.subscriber);
            	   test.equals(err.error.message, "Server conflict. Connect timed out");
                   test.done();            	
            	});
                conn.on('error', function(event) {
                    test.ok(true);
                    test.equals(Object.keys(rayo.tropoCalls).length,1)
                    test.equals(call.connections.length, 1);
                    test.equals(conn.state, 'initial');
                });
				callback(error, null);
            }
            conn = call.connect(addies);
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
    
    'Connect with tel URI succeeds' : function(test) {
        var addy = 'tel:123456789'

        test.expect(7);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(1, command.body.children.length, 'Wrong number of connect targets');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                test.notEqual(-1, indexOf(targets,addy), 'Address not found in connect targets');
            }
            
            var conn = call.connect(addy);
            test.ok(conn);
            test.equals(conn.ringlist.length, 1);
            test.equals(conn.ringlist[0].toURI(),addy);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
    
    'Connect with tel URI succeeds 2' : function(test) {
        var addy = 'tel:+123456789'

        test.expect(7);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(1, command.body.children.length, 'Wrong number of connect targets');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                test.notEqual(-1, indexOf(targets,addy), 'Address not found in connect targets');
            }
            
            var conn = call.connect(addy);
            test.ok(conn);
            test.equals(conn.ringlist.length, 1);
            test.equals(conn.ringlist[0].toURI(),addy);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
    
    'Connect with number URI succeeds' : function(test) {
        var addy = '123456789'

        test.expect(7);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(1, command.body.children.length, 'Wrong number of connect targets');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                test.notEqual(-1, indexOf(targets,'tel:' + addy), 'Address not found in connect targets');
            }
            
            var conn = call.connect(addy);
            test.ok(conn);
            test.equals(conn.ringlist.length, 1);
            test.equals(conn.ringlist[0].toURI(),'tel:'+addy);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
    
    'Connect with number URI succeeds 2' : function(test) {
        var addy = '+123456789'

        test.expect(7);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(1, command.body.children.length, 'Wrong number of connect targets');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                test.notEqual(-1, indexOf(targets,'tel:' + addy), 'Address not found in connect targets');
            }
            
            var conn = call.connect(addy);
            test.ok(conn);
            test.equals(conn.ringlist.length, 1);
            test.equals(conn.ringlist[0].toURI(),'tel:'+addy);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },    
    'Connect with numbers succeeds' : function(test) {
        var addies = ['123456789','+123456789', 'tel:123456789', 'tel:+123456789'];

        test.expect(8);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(addies.length, command.body.children.length, 'Wrong number of connect targets');

                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                
                addies.forEach(function(addy) {
                	if (addy.substring(0,4) === 'tel:') {
                		test.notEqual(-1, indexOf(targets,addy), 'Address not found in connect targets');
                	} else {
                		test.notEqual(-1, indexOf(targets,'tel:' + addy), 'Address not found in connect targets');                    		
                	}
                });
                
                test.done();
            }
            
            var conn = call.connect(addies);
            test.ok(conn);
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
    
    'No Sip URIs are still processed' : function(test) {
        var addy = 'a@tropo.com'

        test.expect(6);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(1, command.body.children.length, 'Wrong number of connect targets');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
            }
            
            var conn = call.connect(addy);
            test.ok(conn);
            test.equals(conn.ringlist.length, 1);
            test.equals(conn.ringlist[0].toURI(),'sip:'+addy);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },    
    
    'Sips URIs succeeds' : function(test) {
        var addy = 'sips:a@tropo.com'

        test.expect(7);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(1, command.body.children.length, 'Wrong number of connect targets');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                test.notEqual(-1, indexOf(targets,addy), 'Address not found in connect targets');
            }
            
            var conn = call.connect(addy);
            test.ok(conn);
            test.equals(conn.ringlist.length, 1);
            test.equals(conn.ringlist[0].toURI(),addy);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },    
    
    'Incoming leg ringing fires' : function(test) {
        test.expect(5);
        // Triggers when the subscriber receives a call
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            call.connections[0].on('ringing', function(event) {
        		test.equals(call, event.call);
        		test.equals(call.connections[0], event.connection);
            });
            
            call.on('connection:created', function(event) { 
            	var con = event.connection;
            	test.notEqual(con,call.connections[0]);
            	con.on('ringing',function(event) { 
            		test.equals(call, event.call);
            		test.equals(con, event.connection);
            		test.done();
            	});
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
    },   
    'Incoming leg connected fires' : function(test) {
        test.expect(9);
        // Triggers when the subscriber receives a call
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.equals(call.connections.length, 1);
            
            console.log('foobar: ', util.inspect(call.connections));
            console.log('foobar 2: ', util.inspect(call.connections[0]));
            
            test.equals(call.connections[0].state, 'initial');
            call.connections[0].on('connected', function(event) {
        		test.equals(call, event.call);
        		test.equals(call.connections[0], event.connection);
            });
        });
        tropo.on('call:connected', function(event) {
        	var call = event.call;
            console.log('0: ', util.inspect(call.connections[0]));
            console.log('1: ', util.inspect(call.connections[1]));
            test.equals(call.connections[0].state, 'connected');
            test.equals(call.connections[0].address.toURI(), defaultFrom);
            test.equals(call.connections[1].state, 'connected');
            test.equals(call.connections[1].address.toURI(), defaultTo);
            test.deepEqual(call.connections[1].ringlist[0].toURI(), defaultTo);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },      
    'Ringing after joined has no effect on incoming' : function(test) {
        test.expect(5);
        // Triggers when the subscriber receives a call
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.equals(call.connections[0].state, 'initial');
            
            call.on('connection:created', function(event) { 
            	var connection = event.connection;
            	connection.on('ringing', function() {
            		test.fail();
            	});
            });
            
            tropo.on('call:connected', function() {
            	console.log('Connected!');
            	test.equals(call.connections.length, 2);
            	var incoming = call.connections[0];
            	var outgoing = call.connections[1];
                incoming.on('disconnected', function() {
                	test.equals(call.connections.length, 1);
                	test.equals(incoming.state, 'disconnected');
                	test.equals(outgoing.state, 'connected');
                	test.done();
                });
            });                
        });

        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
        rayoEvent({
            body: new XmlElement('end')
        });
    },   
    
    'Incoming leg disconnected fires' : function(test) {
        test.expect(15);
        // Triggers when the subscriber receives a call
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            call.connections[0].on('disconnected', function(event) {
            	var connection = event.connection;
                test.equals(connection.state, 'disconnected');
                test.equals(event.connection, connection);
                test.equals(event.call, call);
                test.equals(event.subscriber, call.subscriber);
                test.equals(event.reason, 'hangup');
                test.equals(event.headers['x-foo'],'bar');
                test.equals(event.address, subscriber.address); 
            });
            call.on('connection:disconnected', function(event) {
            	var connection = event.connection;
                test.equals(connection.state, 'disconnected');
                test.equals(event.connection, connection);
                test.equals(event.call, call);
                test.equals(event.subscriber, call.subscriber);
                test.equals(event.reason, 'hangup');
                test.equals(event.headers['x-foo'],'bar');
                test.equals(event.address, subscriber.address); 
                test.done();
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('end').c('hangup').up(),
            headers: {
                'x-foo': 'bar',
            }                  	
        });        
    },    
    'Disconnect inbound call' : function(test) {
        test.expect(5);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
        });
        var idx = 1;
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	console.log('idx = ' + idx++);
        	var call = event.call;
            call.connections[0].disconnect();
        	console.log('idx = ' + idx++);
            process.nextTick(function() {
            	console.log('idx = ' + idx++);
            	test.equals(call.connections.length, 2);
                transport.next(function(command, callback) { }); // connect
                transport.next(function(command, callback) {
                	console.log('idx = ' + idx++);
                    test.equals(command.body.getName(), 'hangup', 'Unexpected Element Name');
                    test.equals(command.callId, 'foocall', 'Unexpected Call ID');
                    call.connections[0].on('disconnected', function() {
                    	console.log('idx = ' + idx++);
	                	test.equals(call.connections.length, 1);
	                    test.done();	                    	
                    });
                    rayoEvent({
                        body: new XmlElement('end'),
                        connectionId: call.connections[0].id
                    });
        	    });
            });
        });  
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },

    'Outgoing leg created fires' : function(test) {
        test.expect(4);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            
            var targets = ['sip:a@tropo.com','sip:b@tropo.com'];
            call.on('connection:created', function(event) { 
                test.equals(event.connection.state, 'initial');
                test.equals(event.connection.ringlist[0].toURI(), targets[0]);
                test.equals(event.connection.ringlist[1].toURI(), targets[1]);
            });
            
		    call.connect(targets);
        });
        tropo.on('call:end', function(event) {
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('end')
        });                
        rayoEvent({
        	connectionId : 'o1',
            body: new XmlElement('end')
        });                
        rayoEvent({
        	connectionId : 'o2',
            body: new XmlElement('end')
        });                
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });                
    },   

    'Outgoing leg ringing fires' : function(test) {
        test.expect(6);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
            connection.on('ringing', function(event) {
                test.equals(event.connection.state, 'ringing');
                test.equals(event.address,'sip:a@tropo.com');
            });
			call.on('connection:ringing', function(event) {
				if (event.connection == connection) {
                    test.equals(event.connection.state, 'ringing');
                    test.equals(event.address,'sip:a@tropo.com');
				}
			});                
        });
        tropo.on('call:end', function(event) {
        	var call = event.call;
            test.ok(call.id);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o1'
        });                
        rayoEvent({
            body: new XmlElement('end')
        });    
        rayoEvent({
        	connectionId : 'o1',
            body: new XmlElement('end')
        });                
        rayoEvent({
        	connectionId : 'o2',
            body: new XmlElement('end')
        });                        
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });                        
    },
    
    'Outgoing leg connected fires' : function(test) {
        test.expect(11);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
            connection.on('connected', function(event) {
                test.equals(event.connection.state, 'connected');
                test.equals(event.connection.address.toURI(), 'sip:b@tropo.com');
                test.equals(event.address,'sip:b@tropo.com');
            });
			call.on('connection:connected', function(event) {
				if (event.connection == connection) {
                    test.equals(event.connection.state, 'connected');
                    test.equals(event.connection.address.toURI(), 'sip:b@tropo.com');
                    test.equals(event.address,'sip:b@tropo.com');
				}
			});                
        });
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            test.equals(call.connections.length, 2);
        });
        tropo.on('call:end', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            test.equals(call.connections.length, 0);
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o1'
        });        
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o2'
        });  
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o2'
        });                                                             
        rayoEvent({
            body: new XmlElement('end')
        });     
        rayoEvent({
        	connectionId : 'o1',
            body: new XmlElement('end')
        });                
        rayoEvent({
        	connectionId : 'o2',
            body: new XmlElement('end')
        });                        
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });                        
    },
    
    'Ringing after joined has no effect on outgoing' : function(test) {
        test.expect(3);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:b@tropo.com']);
            connection.on('connected', function(event) {
                test.equals(event.connection.state, 'connected');
            });
            connection.on('ringing', function(event) {
            	test.fail();
            });
            call.connections[0].on('disconnected', function() {
                test.equals(connection.state, 'connected');
            	test.done();
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o2'
        });                                                             
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o2'
        });  
        rayoEvent({
            body: new XmlElement('end')
        });                
    },  
    
    'Outgoing leg disconnected fires' : function(test) {
        test.expect(16);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
            connection.on('disconnected', function(event) {
			    test.equals(event.connection.state, 'disconnected');
                test.equals(event.connection.state, 'disconnected');
                test.equals(event.connection, connection);
                test.equals(event.call, call);
                test.equals(event.subscriber, call.subscriber);
                test.equals(event.reason, 'hangup');
                test.equals(event.headers['x-foo'],'bar');
                test.equals(event.address, 'sip:b@tropo.com');              
            });
			call.on('connection:disconnected', function(event) {
			    test.equals(event.connection.state, 'disconnected');
                test.equals(event.connection, connection);
                test.equals(event.call, call);
                test.equals(event.subscriber, call.subscriber);
                test.equals(event.reason, 'hangup');
                test.equals(event.headers['x-foo'],'bar');
                test.equals(event.address, 'sip:b@tropo.com'); 			    
			    test.done();
			});
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o1'
        });        
        rayoEvent({
            body: new XmlElement('end'),
            connectionId: 'o1'
        });        
        rayoEvent({
            body: new XmlElement('end').c('hangup').up(),
            connectionId: 'o2',
            headers: {
                'x-foo': 'bar',
            }                   
        });        
    }, 
    
    'Disconnect outbound call' : function(test) {
        test.expect(6);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
		    connection.on('disconnected', function(event) {
		    	console.log('Check');
		    	test.equals(call.connections.length, 1);
		    });
    	    connection.on('connected', function(event) {
    	    	test.equals(call.connections.length, 2);
    	        connection.disconnect();
    	        process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
                    transport.next(function(command, callback) {
                        test.equals(command.body.getName(), 'hangup', 'Unexpected Element Name');
                        test.equals(command.callId, 'foocall', 'Unexpected Call ID');
                        test.equals(command.connectionId, 'o2', 'Unexpected Connection ID');
                        test.done();
        	        });
    	        });
            });			    
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        transport.next(function(command, callback) {});
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o2'
        });                                                                            
        rayoEvent({
            body: new XmlElement('end'),
            connectionId: 'o2'
        });                                                                            
    },
    
    'Ringlist properly maintains connection state' : function(test) {
        test.expect(5);
        var createdFires = false;
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            
            call.on('connection:created', function() { 
            	createdFires = true;
            });
            
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
		    test.equals(call.connections.length, 2);
		    test.strictEqual(call.connections[1], connection);
		    test.equals(createdFires, true);
        });
        
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
		    test.equals(call.connections.length, 2, 'Unexpected number of connections associated with call');
		    test.done();
        });
        
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        
        // Attempt to ring B fails
        rayoEvent({
            body: new XmlElement('end'),
            connectionId: 'o2'
        });
        
        // A answers
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o1'
        });
    },

    'Dial same address in multiple ringlists doesn\'t confuse Tropo' : function(test) {
        test.expect(5);
        var call;
        var connectCleg = function() {
        	call.connect('sip:b@tropo.com');
        }
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	call = event.call;
		    call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
        });
        
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
		    call.on('connection:connected', function(event) { 
			    test.equals(3, call.connections.length);
			    test.equals(call.connections[1].address.toURI(), 'sip:a@tropo.com');
			    test.equals(call.connections[2].address.toURI(), 'sip:b@tropo.com');
			    test.equals(call.connections[1].state, 'connected');
			    test.equals(call.connections[2].state, 'connected');
			    test.done();
		    });
        });
        
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        
        // Attempt to ring B fails
        rayoEvent({
            body: new XmlElement('end'),
            connectionId: 'o2'
        });
        
        // A answers
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o1'
        });
        
        // Ring B again
        connectCleg();        
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o3', to:'sip:b@tropo.com'}).up()
        });
        
        // B answers
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o3'
        });
    }, 
    
    'Disconnect an already disconnected call NOPs' : function(test) {
        test.expect(5);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
    	    connection.on('connected', function(event) {
    	        connection.disconnect();
    	        process.nextTick(function() {
                    transport.next(function(command, callback) {}); // connect
                    transport.next(function(command, callback) {
                        test.equals(command.body.getName(), 'hangup', 'Unexpected Element Name');
                        test.equals(command.callId, 'foocall', 'Unexpected Call ID');                        
                        test.equals(command.connectionId, 'o2', 'Unexpected Connection ID');                        
        	        });
                    rayoEvent({
                        body: new XmlElement('end'),
                        connectionId: 'o2'
                    });        	        
        	        connection.disconnect();
		            setTimeout((function() {
        	        	test.strictEqual(transport.hasNext(), false)
        	        	test.done();
		            }), 100);
    	        });
            });			    
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        transport.next(function(command, callback) {});
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o2'
        });                                                                            
    },
    
    'Call disconnect' : function(test) {
        test.expect(4);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);			    
        });
        tropo.on('call:connected', function(event) {
            var call = event.call;
            call.disconnect();
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
                transport.next(function(command, callback) {
                    test.equals(command.body.getName(), 'hangup', 'Unexpected Element Name');
                    test.equals(command.callId, 'foocall', 'Unexpected Call ID');
                    test.strictEqual(transport.hasNext(), false);
                    test.done();                        
        	    });
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        transport.next(function(command, callback) {});
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o2'
        });                                                                            
    },
    
    'Post offer connect' : function(test) {
        test.expect(8);
        var createdFires = false;
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            
            call.on('connection:created', function() { 
            	createdFires = true;
            });
            
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
		    test.equals(call.connections.length, 2);
		    test.strictEqual(call.connections[1], connection);
		    test.equals(createdFires, true);
        });
        
        tropo.on('call:connected', function(event) {
        	var call = event.call;
			test.equals(call.connections.length, 2, 'Unexpected number of connections associated with call');
			
			call.on('connection:created', function(event) {
				
            	test.ok(event);
			});
			
			call.on('connection:connected', function(event) {
				
            	test.ok(event);
				test.equals(call.connections.length, 3, 'Unexpected number of connections associated with call');
            	test.done();
			});
			
			call.connect('sip:c@tropo.com');			    

			// C answers
	        rayoEvent({
	            body: new XmlElement('announce').c('joining', {'call-id':'o3', to:'sip:c@tropo.com'}).up()
	        });
	        rayoEvent({
	            body: new XmlElement('joined'),
	            connectionId: 'o3'
	        });
        });
        
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        
        // Attempt to ring B fails
        rayoEvent({
            body: new XmlElement('end'),
            connectionId: 'o2'
        });
        
        // A answers
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o1'
        });
    },
    
    'RayoUrl is used when available' : function(test) {
    	var url = 'http://tropoisawesome.com';
    	
        test.expect(4);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	test.equals(event.call.rayoCall.rayoUrl, url);
        	var call = event.call;
		    var connection = call.connect('sip:a@tropo.com');
        	process.nextTick(function() {
                transport.next(function(command, callback) {
                    test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                    test.equals(command.callId, 'foocall', 'Unexpected Call ID');
                    test.equals(command.rayoUrl, url, 'Unexpected Url');
                    test.done();
        	    });
        	});
        });
        
        newCall({rayoUrl:url, subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },

    'Auth token is used when available' : function(test) {
    	var token = 'abcdef';
    	
        test.expect(4);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	test.equals(event.call.rayoCall.authToken, token);
        	var call = event.call;
		    var connection = call.connect('sip:a@tropo.com');
        	
        	process.nextTick(function() {
                transport.next(function(command, callback) {
                    test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                    test.equals(command.callId, 'foocall', 'Unexpected Call ID');
                    test.equals(command.authToken, token, 'Unexpected token');
                    test.done();
        	    });
        	});
        });
        
        newCall({authToken:token, subscriber: defaultTo, permissions: ['CALL_RING_LIST']  });
    },

    'Connect fails no ringlist permission' : function(test) {
        var addies = ['sip:a@tropo.com','sip:b@tropo.com', 'sip:c@tropo.com'];

        test.expect(6);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            call.on('error', function(err) {
               test.equals(call, err.call);
               test.equals(subscriber, err.subscriber);
               test.equals(err.error.message, "No permission.");
               test.equals(err.error.code, 403);
               test.done();             
            });
            transport.send = function(command, callback) {
            	var error = new Error("No permission.");
            	error.code = 403;
				callback(error, null);
				test.ok(true);
                test.equals(Object.keys(call.rayo.tropoCalls).length,0)
            }
            var conn = call.connect(addies);
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },
   
    'Ringlist works on masked incoming call' : function(test) {
        test.expect(9);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
            connection.on('connected', function(event) {
                test.equals(event.connection.state, 'connected');
                test.equals(event.connection.address.toURI(), 'sip:b@tropo.com');
                test.equals(event.address,'sip:b@tropo.com');
            });
			call.on('connection:connected', function(event) {
				if (event.connection == connection) {
                    test.equals(event.connection.state, 'connected');
                    test.equals(event.connection.address.toURI(), 'sip:b@tropo.com');
                    test.equals(event.address,'sip:b@tropo.com');
				}
			});                
        });
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
        });
        tropo.on('call:end', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            test.done();
        });
        newCall({maskFrom:true, subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o1'
        });        
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o2'
        });  
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o2'
        });                                                             
        rayoEvent({
            body: new XmlElement('end')
        });                
        rayoEvent({
        	connectionId : 'o1',
            body: new XmlElement('end')
        });                
        rayoEvent({
        	connectionId : 'o2',
            body: new XmlElement('end')
        });                
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });                        
    },
   
    'Ringlist works on masked outgoing call' : function(test) {
        test.expect(9);
        tropo.on('call:outgoing', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
            connection.on('connected', function(event) {
                test.equals(event.connection.state, 'connected');
                test.equals(event.connection.address.toURI(), 'sip:b@tropo.com');
                test.equals(event.address,'sip:b@tropo.com');
            });
			call.on('connection:connected', function(event) {
				if (event.connection == connection) {
                    test.equals(event.connection.state, 'connected');
                    test.equals(event.connection.address.toURI(), 'sip:b@tropo.com');
                    test.equals(event.address,'sip:b@tropo.com');
				}
			});                
        });
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
        });
        tropo.on('call:end', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            test.done();
        });
        newCall({maskTo:true, direction: 'out', subscriber: defaultFrom, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o1'
        });        
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o2'
        });  
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId: 'o2'
        });                                                             
        rayoEvent({
            body: new XmlElement('end')
        });
        rayoEvent({
        	connectionId : 'o1',
            body: new XmlElement('end')
        });                
        rayoEvent({
        	connectionId : 'o2',
            body: new XmlElement('end')
        });                        
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });                        
    }, 

    'Additional ringing events for same leg not forwarded' : function(test) {
        test.expect(2);
    	var ringingEvents  = 0;
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            test.equals(ringingEvents, 2);
            test.done();
        });
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
        	call.on('connection:ringing', function(event) {
        		ringingEvents++;
        	});
        });
        newCall({ type : 'out', subscriber: defaultFrom, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });        
        rayoEvent({
        	connectionId : blegId,
            body: new XmlElement('joined')
        });
    },  
    'Subscriber header is used' : function(test) {
        test.expect(2);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	test.equals(subscriber.id, 'sip:alice@example.com');
        	var call = event.call;
        	test.equals(call.subscriber.id, 'sip:alice@example.com');
            test.done();
        });
        newCall({subscriber:'sip:alice@example.com'});
    },

    'Answer callback runs' : function(test) {
        test.expect(2);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	test.equals(subscriber.id, 'sip:alice@example.com');
        	var call = event.call;
        	call.answer(function(err, obj) {
        		test.ok(obj);
        		test.done();
        	});
            process.nextTick(function() {
                transport.next(function(command, callback) { callback(null, 'ok'); }); // answer: err,obj pair
            });
        });
        newCall({subscriber:'sip:alice@example.com'});        
    },
    'Answer request fails' : function(test) {
        test.expect(8);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	test.equals(subscriber.id, 'sip:alice@example.com');
        	var call = event.call;
        	call.on('answered', function() {
        		test.ok(false, 'Answered should never trigger on failure.')
        	});
        	call.on('error', function(err) {
        		test.ok(err);
                test.equals(err.call, call);
                test.equals(err.subscriber, subscriber);
                test.equals(err.error.code, 409);
        		test.equals(err.error.message, 'Server conflict.');            		
        	});
        	call.answer(function(err, obj) {
        		test.ok(err);
        		test.equals(err.message, 'Server conflict.');
        		test.done();
        	});
            process.nextTick(function() {
                transport.next(function(command, callback) {
                	var error = new Error("Server conflict.");
                	error.code = 409;
					callback(error, null);
                }); // answer: err,obj pair
            });
        });
        newCall({subscriber:'sip:alice@example.com'});        
    },    
    'Answered fires' : function(test) {
        test.expect(3);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	test.equals(subscriber.id, 'sip:alice@example.com');
        	var call = event.call;
        	call.answer(function() {});
        	call.on('answered', function(event) {
        		test.ok(event);
        		test.equals(event.call, call);
        		test.done();
        	});
            process.nextTick(function() {
                transport.next(function(command, callback) { callback(null, 'ok'); }); // answer: err,obj pair
            });
        });
        newCall({subscriber:'sip:alice@example.com'});        
    },                  
    'Empty answer is allowed' : function(test) {
        test.expect(3);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	test.equals(subscriber.id, 'sip:alice@example.com');
        	var call = event.call;
        	call.answer();
        	call.on('answered', function(event) {
        		test.ok(event);
        		test.equals(event.call, call);
        		test.done();
        	});
            process.nextTick(function() {
                transport.next(function(command, callback) { callback(null, 'ok'); }); // answer: err,obj pair
            });
        });
        newCall({subscriber:'sip:alice@example.com'});        
    },                  
    'Answer cannot be sent after connect' : function(test) {
        var addy = 'sip:foo@tropo.com'

        test.expect(5);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	// Connect sent. Try to answer
            	call.on('error', function(err) {
                    test.ok(err);
                    test.equals(err.call, call);
                    test.equals(err.subscriber, subscriber);
                    test.equals(err.error.message, 'A connect request has already been sent');                 
            		test.done();
            	});
            	call.answer();
            }
            
            var conn = call.connect(addy);
            test.ok(conn);
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });    	
    },                  
    'Answer cannot be sent after continue' : function(test) {
        var addy = 'sip:foo@tropo.com'

        test.expect(4);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            call.on('connection:created', function(event) {
                call.on('error', function(err) {
                    test.ok(err);
                    test.equals(err.call, call);
                    test.equals(err.subscriber, subscriber);
                    test.equals(err.error.message, 'A continue request has already been sent');                 
                    test.done();
                });
            	call.answer();
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });    	
    },                  
    'Answer cannot be sent after answer' : function(test) {
        var addy = 'sip:foo@tropo.com'

        test.expect(4);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            call.on('error', function(err) {
                test.ok(err);
                test.equals(err.call, call);
                test.equals(err.subscriber, subscriber);
                test.equals(err.error.message, 'An answer request has already been sent');                 
                test.done();
            });
        	call.answer();
        	call.answer();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });    	
    },                  
    'Answer cannot be sent after call is rejected' : function(test) {
        test.expect(4);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            call.on('error', function(err) {
                test.ok(err);
                test.equals(err.call, call);
                test.equals(err.subscriber, subscriber);
                test.equals(err.error.message, 'Call already rejected');                 
                test.done();
            });
        	call.reject();
        	call.answer();            	
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },                  
    'Connect with headers succeeds' : function(test) {
        var addies = ['sip:a@tropo.com','sip:b@tropo.com','sip:c@tropo.com'];

        test.expect(15);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            transport.send = function(command) {
            	test.equals(defaultCallId, command.callId, 'wrong call ID');
                test.equals(command.body.getName(), 'connect', 'Unexpected Element Name');
                test.equals(addies.length, command.body.getChildren('target').length, 'Wrong number of connect targets');
                var headers = command.body.getChildren('header');
                test.equals(2, headers.length, 'Wrong number of headers');                    
                test.equals(headers[0].attrs['name'], 'x-foo', 'Unexpected header name');
                test.equals(headers[0].attrs['value'], 'bar', 'Unexpected header value');
                test.equals(headers[1].attrs['name'], 'x-bling', 'Unexpected header name');
                test.equals(headers[1].attrs['value'], 'blaz', 'Unexpected header value');
                
                var targets = command.body.children.map(function(item) { 
                	return item.getText();
                });
                
                addies.forEach(function(addy) { 
                	test.notEqual(-1, indexOf(targets,addy), 'Address not found in connect targets');
                });
            }
            
            var conn = call.connect(addies, { 
              headers: {
                'x-foo': 'bar',
                'x-bling': 'blaz'
              }   
            });
            test.ok(conn);
            var ringlistItems = conn.ringlist.sort();
            var addiesItems = addies.sort();
            for(var i=0;i<ringlistItems.length;i++) {
            	test.equals(ringlistItems[i].toURI(), addies[i]);
            }
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
    },    
    'Incoming call has headers' : function(test) {
        test.expect(2);
        // Triggers when the subscriber receives a call
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
        	test.equals(call.connections[0].headers['x-foo'], 'bar', 'Bad header');
        	test.equals(call.connections[0].headers['x-bling'], 'blaz', 'Bad header');
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'],
            headers: {
                'x-foo': 'bar',
                'x-bling': 'blaz'
              }   
        });
    },
    'Outgoing call has headers' : function(test) {
        test.expect(3);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
            
            var targets = ['sip:a@tropo.com','sip:b@tropo.com'];
            call.on('connection:created', function(event) { 
            	var con = event.connection;
            	test.equals(con.headers['x-foo'], 'bar', 'Bad header');
            	test.equals(con.headers['x-bling'], 'blaz', 'Bad header');
            });
            
		    call.connect(targets,{
                headers: {
                  'x-foo': 'bar',
                  'x-bling': 'blaz'
                }   			    	
		    });
        });
        tropo.on('call:end', function(event) {
            test.done();
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('end')
        });                
        rayoEvent({
        	connectionId : 'o1',
            body: new XmlElement('end')
        });                
        rayoEvent({
        	connectionId : 'o2',
            body: new XmlElement('end')
        });                
        rayoEvent({
            connectionId : 'null',
            body: new XmlElement('end')
        });                        
    },   

    'Incoming call events propagate headers' : function(test) {
        test.expect(2);
        tropo.on('call:incoming', function(event) {            	
        	var subscriber = event.subscriber;
        	var call = event.call;
        	
        	call.connections[0].on('disconnected', function(event) {
                test.equals(event.headers['x-foo'],'bar', 'Wrong header');
                test.equals(event.headers['x-bling'],'blaz', 'Wrong header');
                test.done();
        	});
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
        	connectionId : blegId,
            body: new XmlElement('end')
        });
        rayoEvent({
            body: new XmlElement('end')
				.c('header', {'name':'x-foo', 'value':'bar'}).up()
				.c('header', {'name':'x-bling', 'value':'blaz'}).up()        
        });        
    },
    
    'Outgoing call events propagate headers' : function(test) {
    	
        test.expect(5);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call;
            test.ok(call.id);
		    var connection = call.connect(['sip:a@tropo.com','sip:b@tropo.com']);
            connection.on('disconnected', function(event) {
			    test.equals(event.connection.state, 'disconnected');
            });
			call.on('connection:disconnected', function(event) {
			    test.equals(event.connection.state, 'disconnected');
                test.equals(event.headers['x-foo'],'bar', 'Wrong header');
                test.equals(event.headers['x-bling'],'blaz', 'Wrong header');
			    test.done();
			});
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o1', to:'sip:a@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'o2', to:'sip:b@tropo.com'}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId: 'o1'
        });        
        rayoEvent({
            body: new XmlElement('end'),
            connectionId: 'o1'
        });        
        rayoEvent({
            body: new XmlElement('end')
				.c('header', {'name':'x-foo', 'value':'bar'}).up()
				.c('header', {'name':'x-bling', 'value':'blaz'}).up(),        
            connectionId: 'o2'
        });                
    }, 
    
    // Test for SUP-1448
    'Connected will not trigger when missing plus on tel uri' : function(test) {
    	
        test.expect(1);
        tropo.on('call:incoming', function(event) {
        	
        	var subscriber = event.subscriber;
            var call = event.call;
            call.autoConnect = false;
            call.connect('tel:+9505850414757878');            	
        });
        
        tropo.on('call:connected', function(event) {
        	
            var call = event.call;
        	console.log(new Date().toString() + ' Call connected');
        	test.ok(true);
        	test.done();
        });

        tropo.on('call:end', function(event) {
        	
            console.log(new Date().toString() + ' Call ended');
        });
        
        /* offer */
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] ,callId:"ca850b69-77ef-4a9f-b7c0-72cacdb0c1ab", connectionId:"wvu8ove-lx7-eqohblob7not"});
        /* B-Leg */
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':'wvu8ove-lx7-ipqpbq0mm8ot', to:'tel:9505850414757878'}).up(),
            callId: "ca850b69-77ef-4a9f-b7c0-72cacdb0c1ab", 
            connectionId: "wvu8ove-lx7-eqohblob7not"
            
        });
        /* Two ringing events on B-Leg */
        rayoEvent({
            body: new XmlElement('ringing'),
            callId: "ca850b69-77ef-4a9f-b7c0-72cacdb0c1ab",
            connectionId: 'wvu8ove-lx7-ipqpbq0mm8ot'
        });        
        rayoEvent({
            body: new XmlElement('ringing'),
            callId: "ca850b69-77ef-4a9f-b7c0-72cacdb0c1ab",
            connectionId: 'wvu8ove-lx7-ipqpbq0mm8ot'
        });
        /* Answered on B-Leg */
        rayoEvent({
            body: new XmlElement('answered'),
            callId: "ca850b69-77ef-4a9f-b7c0-72cacdb0c1ab",
            connectionId: 'wvu8ove-lx7-ipqpbq0mm8ot'
        });    
        /* Two joined-unjoined pairs from A-Leg two B-Leg */
        rayoEvent({
            body: new XmlElement('joined',{'call-id':'wvu8ove-lx7-eqohblob7not'}),
            callId: "ca850b69-77ef-4a9f-b7c0-72cacdb0c1ab",
            connectionId: 'wvu8ove-lx7-ipqpbq0mm8ot'
        });        
        rayoEvent({
            body: new XmlElement('unjoined',{'call-id':'wvu8ove-lx7-eqohblob7not'}),
            callId: "ca850b69-77ef-4a9f-b7c0-72cacdb0c1ab",
            connectionId: 'wvu8ove-lx7-ipqpbq0mm8ot'
        });        
        rayoEvent({
            body: new XmlElement('joined',{'call-id':'wvu8ove-lx7-eqohblob7not'}),
            callId: "ca850b69-77ef-4a9f-b7c0-72cacdb0c1ab",
            connectionId: 'wvu8ove-lx7-ipqpbq0mm8ot'
        });        
        rayoEvent({
            body: new XmlElement('unjoined',{'call-id':'wvu8ove-lx7-eqohblob7not'}),
            callId: "ca850b69-77ef-4a9f-b7c0-72cacdb0c1ab",
            connectionId: 'wvu8ove-lx7-ipqpbq0mm8ot'
        });        
        
    }, 
    
    'Disconnected propagated on global call:end' : function(test) {
        // global call end propagates events to connections
    
        test.expect(7);
        tropo.on('call:connected', function(event) {
            var subscriber = event.subscriber;
            var call = event.call;
            test.ok(call.id);
            test.equals(call.connections.length,2);
            
            var conn1 = call.connections[0];
            var conn2 = call.connections[1];
            conn1.on('disconnected', function(event) {
                test.ok(event);
            });
            conn2.on('disconnected', function(event) {
                test.ok(event);
            });
            call.on('connection:disconnected', function(event) {
                test.ok((event.connection == conn1) || (event.connection == conn2));
            });
            
            call.on('end', function(event) {
                test.ok(event);
                test.done();
            });
            
            rayoEvent({
                body: new XmlElement('end'),
                connectionId: 'null'
            });
        });
        newCall({ type : 'out',subscriber: defaultFrom, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
        rayoEvent({
            connectionId : blegId,
            body: new XmlElement('joined')
        });               
    },
    
    'Test end event data' : function(test) {
    
        test.expect(6);
        tropo.on('call:connected', function(event) {
            var subscriber = event.subscriber;
            var call = event.call;
            test.ok(call.id);
            test.equals(call.connections.length,2);
            
            call.on('end', function(event) {
                test.ok(event);
                test.equals(event.subscriber, subscriber);
                test.equals(event.call, call);
                test.equals(event.reason, 'hangup');
                test.done();
            });
            
            rayoEvent({
                body: new XmlElement('end').c('hangup').up(),
                connectionId: 'null'
            });
        });
        newCall({ type : 'out',subscriber: defaultFrom, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
        rayoEvent({
            connectionId : blegId,
            body: new XmlElement('joined')
        });               
    },      
    
    'Test connection created event data' : function(test) {
        test.expect(5);
        // Triggers when the subscriber receives a call
        tropo.on('call:incoming', function(event) {
            var subscriber = event.subscriber;
            var call = event.call;
            
            call.on('connection:created', function(event) { 
                test.ok(event.connection);
                test.ok(event.call);
                test.equals(event.call.id, call.id);
                test.ok(event.subscriber);
                test.equals(subscriber.address, event.subscriber.address);
                test.done();
            });
        });

        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST'] });
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
    },   
      
   // This one is similar to the ping tests in rayo.js but we check that the tropo call gets the event   
   'Ping notifies app when gone from Tropo Connect server': function(test) {

        test.expect(9);
        tropo.on('call:connected', function(event) {
            var subscriber = event.subscriber;
            var call = event.call;
            test.ok(call.id);
            call.on('error', function(error) {
                console.log('Got error on call: ' + util.inspect(event));
                test.ok(error);
            });
            call.on('end', function(event) {
                console.log('Call ended'  + util.inspect(event));
                test.ok(event);
                test.equals(event.reason,'error');
                test.done();
            });            
            call.connections.forEach(function(conn) {
                conn.on('disconnected', function(event) {
                    test.ok(event);
                    test.equals(event.reason,'error');
                    console.log('Got disconnect'  + util.inspect(event));
                });
            });
            
            // force ping failure
            console.log('Sending bulk ping');
            process.nextTick(function() {
                console.log('next tick');
                transport.send = function(command, callback) {
                    console.log('Got bulk pong');
                    test.equals(command.body.getName(), 'bulkPing', 'Expected ping');
                    callback(null, new XmlElement('bulkPong').t('foo,bar'));
                }
            });            
            
        });
        newCall({ type : 'out',subscriber: defaultFrom, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
        rayoEvent({
            connectionId : blegId,
            body: new XmlElement('joined')
        });
   },

   // Same as above but we do not register the error handler. App should not be broken.   
   'No error handler on call does not break app': function(test) {

        test.expect(8);
        tropo.on('call:connected', function(event) {
            var subscriber = event.subscriber;
            var call = event.call;
            test.ok(call.id);
            call.on('end', function(event) {
                console.log('Call ended'  + util.inspect(event));
                test.ok(event);
                test.equals(event.reason,'error');
                test.done();
            });            
            call.connections.forEach(function(conn) {
                conn.on('disconnected', function(event) {
                    test.ok(event);
                    test.equals(event.reason,'error');
                    console.log('Got disconnect'  + util.inspect(event));
                });
            });
            
            // force ping failure
            console.log('Sending bulk ping');
            process.nextTick(function() {
                console.log('next tick');
                transport.send = function(command, callback) {
                    console.log('Got bulk pong');
                    test.equals(command.body.getName(), 'bulkPing', 'Expected ping');
                    callback(null, new XmlElement('bulkPong').t('foo,bar'));
                }
            });            
            
        });
        newCall({ type : 'out',subscriber: defaultFrom, permissions: ['CALL_RING_LIST'] });
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('ringing'),
            connectionId : blegId
        });
        rayoEvent({
            connectionId : blegId,
            body: new XmlElement('joined')
        });
   },

   'Tropo Call is not cleaned up': function(test) {
        test.expect(2);
        tropo.on('call:connected', function(event) {
            var call = event.call
            call.connections[0].on('end', function(event) {
              console.log('Received end on A leg');
            });
            call.connections[1].on('end', function(event) {
              console.log('Received end on B leg');
            });
            
            process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
            });
                            
            var result = call.say('foo', 'bar');
            test.ok(result);
            test.deepEqual(result.tokens, ['foo', 'bar']);
            process.nextTick(function() {
                transport.next(function(command, callback) {        
                    callback(null, new XmlElement('ref', {id:'123456'}));

                    rayoEvent({
                        body: new XmlElement('end')
                    });        
                    rayoEvent({
                        connectionId : blegId,
                        body: new XmlElement('end')
                    });
                    setTimeout(function() {                    
                        rayoEvent({
                            body: new XmlElement('complete').c('success').up(),
                            componentId: '123456'
                        })
                    }, 2000);
                });
            });
            
            result.on('end', function(event) {
                console.log('Received end on component');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:'tel:+555'}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },     
};

function rayoEvent(event) {
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var componentId = null;
    var headers;
    if (event.callId) {
        callId = event.callId;
    } 
    if (event.headers) {
        headers = event.headers;
    }
    if (event.connectionId) {
        if (event.connectionId == 'null') {
            connectionId = null;
        } else {
            connectionId = event.connectionId;
        }
    }
    
    if (event.componentId) {
        componentId = event.componentId;
    } 
    for (var header in headers) {
        event.body.c('header', {
            name: header,
            value: headers[header]
        });
    }    
    
    transport.emit('callEvent', {
        callId : callId,
        connectionId : connectionId,
        componentId : componentId,
        body : event.body
    });
};

function newCall(options) {
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var direction = 'in';
    var rayoUrl;
    var authToken;
    var from = defaultFrom;
    var to = defaultTo;
    var subscriber;
    var headers = {};
    
    if (options) {
        if (options.callId) {
            callId = options.callId;
        }
        if (options.connectionId) {
    	    connectionId = options.connectionId;
        }
        if (options.direction) {
            direction = options.direction;
        }
        if (options.rayoUrl) {
        	rayoUrl = options.rayoUrl;
        }
        if (options.authToken) {
        	authToken = options.authToken;
        }
        if (options.maskFrom) {
        	from = null;
        }
        if (options.maskTo) {
        	to = null;
        }
        if (options.headers) {
        	headers = options.headers;
        }
        if (options.subscriber) {
        	subscriber = options.subscriber;
        }
    }
    
    var body = new XmlElement('offer', {
        to : to,
        from : from,
        'direction' : direction,
    });
	for (var header in headers) {
		body.c('header', {
			name: header,
			value: options.headers[header]
		});
	}
	var subscription = body.c('subscription');
	subscription.c('address').t(subscriber);
	if (options.permissions) {
		for (var permission in options.permissions) {
			subscription.c('permission', {'name' : options.permissions[permission]});
		}
	}	
    transport.emit('callEvent', {
        callId : callId,
        connectionId: connectionId,
        body : body,
        rayoUrl: rayoUrl,
        authToken: authToken,
        subscriber: subscriber
    });
};

function indexOf(targets, uri) {
	
	for (var i in targets) {
		var target = targets[i];
		if (typeof target === 'string') {
			if (target === uri) {
				return i;
			}
		} else {
			if (target.toURI() === uri) {
				return i;
			}
		}
	}
	return -1;
}

