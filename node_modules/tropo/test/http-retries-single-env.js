var Rayo = require('../lib/rayo')
var util = require('util');
var events = require('events');
var request = require('request');
var http = require('http');
var XmlElement = require('../lib/utils').XmlElement;
var parseXml = require('../lib/utils').parseXml;
var testServers = require('../test/util/testServers').TestServers;

var client = null;
var listenAddress='localhost:62000';

process.on('uncaughtException', function(err) {
	console.log('Caught exception: ', err, err.stack);
	process.exit(1);
});

process.env.HTTP_RETRIES = 4

var Transport = require('../lib/rayo-http.js'); 
var transport = new Transport({rayoAddress:'http://localhost:43443', listenAddress:listenAddress});

client = new Rayo({}, transport);

var _this = this;

module.exports = {

   setUp: function(callback) {

      testServers.start();
      callback();
   },
   
   tearDown: function(callback) {
	   callback();
   },
   
   'Test retries with both retry variables': function(test) {

      // Unfortunate that we ended up cross-checking two different variable names. This test is to 
      // make guarantee retries are executed when both variables are set. 

      test.expect(2);
      test.ok(client);
      
      var command = client.command("continue");
      command.send(function(err, res) {
          console.log('Error: ' + util.inspect(err));
          console.log('Response: ' + util.inspect(res));
          test.equals(err.retries, 4);
          test.done();
      });      
   },
       
   'Global dispose': function(test) {

       // Dirty dirty dirty, but:
       // - nodeunit has no way to do global tests
       // - don't have time to integrate grunt right now
       // jenkins refuse to dispose sockets gracefully so I have to create the servers just once and keep them open
       // :'(
       
       if (client) {
           console.log('Disposing');
           client.dispose();
           //transport.stop();
           try {
             transport._server.close();
           } catch (e) {}
           transport.removeAllListeners('callEvent');
       }
       testServers.end();
       test.done();
   }   
};

   
function send(headers, body, callback) {

	console.log('Sending message ' + body);
    request.post({
        headers: headers,
        url: 'http://'+listenAddress,
        body: body}, function(err, res, body){
		    if (callback) {
		    	callback(err,res);
		    }
        });
};

function newCall(callId, connectionId, rayoUrl) {

	var defaultTo = 'tel:+555';
	var defaultFrom = 'tel:+666';
    var body = new XmlElement('offer', {
        to : defaultTo,
        from : defaultFrom,
        'direction' : 'in',
    });

	var subscription = body.c('subscription');
	subscription.c('address').t(defaultTo);
	subscription.c('permission', {name:'CALL_RING_LIST'});
	subscription.c('permission', {name: 'CALL_RECORD'});
	subscription.c('priority').t('1');
	subscription.c('required').t('true');

    client.transport.emit('callEvent', {
      callId: callId ? callId : 'foo',
      connectionId: connectionId ? connectionId : 'bar',    		  
      rayoUrl: rayoUrl ? rayoUrl : 'http://localhost:8080/rayo/tropo',
      body: body
    });
};
