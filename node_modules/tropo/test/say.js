var Rayo = require('../lib/rayo')
var util = require('util');
var events = require('events');
var Tropo = require('../lib/tropo-impl');
var MockTransport = require('../lib/rayo-mock');
var fs = require('fs');
var XmlElement = require('../lib/utils').XmlElement;

var tropo = null;
var transport = null;

var defaultCallId = 'foocall';
var defaultConnectionId = 'fooconn';
var defaultTo = 'tel:+555';
var defaultFrom = 'tel:+666';

module.exports = {

    setUp : function(callback) {
        var transportConfig = {
            type : 'mock'
        };
        var rayoConfig = {
        	callPingInterval : '5000'
        };

        tropo = new Tropo();
        tropo.debug = true;
        
        // Initialize Tropo
        tropo.init({
            rayoTransportConfig : transportConfig,
            rayoConfig: rayoConfig,
            defaultPermissions: ['CALL_RING_LIST']
        });
        transport = tropo.mockTransport;
        callback();
    },
    
    tearDown: function(callback) {
    	
    	tropo.shutdown();
    	callback();
    },
    'Call say succeeds' : function(test) {
        test.expect(11);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
        	                
            var result = call.say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('success').up(),
	            	    componentId: '123456'
	        		})
                });
    		});
    		
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);      
    			test.equals(event.cause, 'success');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    
    'Connection say with audio succeeds' : function(test) {
        test.expect(10);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
            
            var result = call.say('foo', 'http://www.myserver.com/a.mp3');
    		test.ok(result);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'audio', 'Unexpected Element Name');
                    test.equals(command.body.children[1].attrs['src'], 'http://www.myserver.com/a.mp3', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('success').up(),
	            	    componentId: '123456'
	        		})
                });
    		});
    		
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.cause, 'success');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Call say with ssml succeeds' : function(test) {
        test.expect(7);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
        	var ssml = '<speak><say-as interpret-as=\"ordinal\">100</say-as></speak>';                
            var result = call.say(ssml);
    		test.ok(result);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.getText(), ssml, 'Unexpected Element Name');
					callback(null, new XmlElement('ref', {id:'123456'}));
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('success').up(),
	            	    componentId: '123456'
	        		})
                })
    		})
    		
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.cause, 'success');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    }, 
    'Call say with ssml and attributes succeeds' : function(test) {
        test.expect(7);
        tropo.on('call:connected', function(event) {
            var subscriber = event.subscriber;
            var call = event.call
            process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
            });
            var ssml = '<speak version="1.1"><say-as interpret-as=\"ordinal\">100</say-as></speak>';                
            var result = call.say(ssml);
            test.ok(result);
            process.nextTick(function() {
                transport.next(function(command, callback) {        
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.getText(), ssml, 'Unexpected Element Name');
                    callback(null, new XmlElement('ref', {id:'123456'}));
                    rayoEvent({
                        body: new XmlElement('complete').c('success').up(),
                        componentId: '123456'
                    })
                })
            })
            
            result.on('end', function(event) {
                test.equals(event.call, call);
                test.equals(event.say, result);
                test.equals(event.subscriber, subscriber);
                test.equals(event.cause, 'success');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },     
    /*
    'Call say succeds when call is not connected' : function(test) {
        test.expect(2);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            tropo.on('call:incoming', function(event) {
            	var call = event.call
                
        		call.on('error', function(error) {
				    test.ok(false, "no error should be thrown");
        		});
                var result = call.say('hello');
                test.ok();
                test.done();		
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
    },
    */
    'Call say stop succeeds' : function(test) {
        test.expect(12);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
                })
                
    			result.stop();
            	process.nextTick(function() {
	            	transport.next(function(command, callback) {
	            		test.equals(command.body.getName(), 'stop', 'Unexpected Element Name');
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('stop').up(),
	                	    componentId: '123456'
	            		})
	            	});
            	});
    		})
    		        		                
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);      
    			test.equals(event.cause, 'stop');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },        
    
    'Call say command fails if call has ended' : function(test) {
        test.expect(3);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
					callback(null, new XmlElement('ref', {id:'123456'}));
					
                    rayoEvent({
                        body: new XmlElement('end')
                    });

	    			result.stop();
                })	                
    		})
    		        		                
    		result.on('error', function(event) {
				test.equals(event.error.message, 'Tropo Call [foocall], Connection [null] has ended.');        			
        	    test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },          
    'Call say ends with hangup' : function(test) {
        test.expect(11);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
                })
            	rayoEvent({
            	    body: new XmlElement('complete').c('hangup').up(),
            	    componentId: '123456'
        		})
    		})
    		
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);      
    			test.equals(event.cause, 'hangup');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    'Connection say succeeds' : function(test) {
        test.expect(11);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
        	                
            var result = call.connections[0].say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('success').up(),
	            	    componentId: '123456'
	        		})
                });
    		});
    		
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);      
    			test.equals(event.cause, 'success');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    
    'Connection say with audio succeeds' : function(test) {
        test.expect(10);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
            
            var result = call.connections[0].say('foo', 'http://www.myserver.com/a.mp3');
    		test.ok(result);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'audio', 'Unexpected Element Name');
                    test.equals(command.body.children[1].attrs['src'], 'http://www.myserver.com/a.mp3', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('success').up(),
	            	    componentId: '123456'
	        		})
                });
    		});
    		
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.cause, 'success');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Connection say with ssml succeeds' : function(test) {
        test.expect(7);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
        	var ssml = '<speak><say-as interpret-as=\"ordinal\">100</say-as></speak>';                
            var result = call.connections[0].say(ssml);
    		test.ok(result);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.getText(), ssml, 'Unexpected Element Name');
					callback(null, new XmlElement('ref', {id:'123456'}));
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('success').up(),
	            	    componentId: '123456'
	        		})
                })
    		})
    		
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.cause, 'success');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    }, 
    
    'Connection say stop succeeds' : function(test) {
        test.expect(12);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.connections[0].say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
                })
                
    			result.stop();
            	process.nextTick(function() {
	            	transport.next(function(command, callback) {
	            		test.equals(command.body.getName(), 'stop', 'Unexpected Element Name');
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('stop').up(),
	                	    componentId: '123456'
	            		})
	            	});
            	});
    		})
    		        		                
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);      
    			test.equals(event.cause, 'stop');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },        
    'Connection say command fails if call has ended' : function(test) {
        test.expect(3);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.connections[0].say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
					callback(null, new XmlElement('ref', {id:'123456'}));
					
                    rayoEvent({
                        body: new XmlElement('end')
                    });

	    			result.stop();
                })	                
    		})
    		        		                
    		result.on('error', function(event) {
				test.equals(event.error.message, 'Tropo Call [foocall], Connection [fooconn] has ended.');
        	    test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },        
    'Connection say ends with hangup' : function(test) {
        test.expect(11);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.connections[0].say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
                })
            	rayoEvent({
            	    body: new XmlElement('complete').c('hangup').up(),
            	    componentId: '123456'
        		})
    		})
    		
    		result.on('end', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);      
    			test.equals(event.cause, 'hangup');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },       
    /*
    'Connection say succeeds when connection is not connected' : function(test) {
        test.expect(2);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            tropo.on('call:incoming', function(event) {
            	var call = event.call                
                var targets = ['a','b'];
			    var connection = call.connect(targets);

            	connection.on('error', function(error) {
				    test.ok(false, "Error is not expected");
        		});

                var result = connection.say('hello');
                test.ok(result);
                test.done();		
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
    },
    */     
    'Call say throws error' : function(test) {
        test.expect(12);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
                })
            	rayoEvent({
            	    body: new XmlElement('complete').c('error').up(),
            	    componentId: '123456'
        		})
    		})
    		
    		result.on('error', function(event) {
      		    test.ok(event.error);
    			test.equals(event.call, call);
    			test.ok(event.say, result);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.cause, 'error');
                test.done();
            });
    		result.on('end', function(event) {
    			test.ok(false, "this event is not expected");
    		});
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },   
    'Connection say throws error' : function(test) {
        test.expect(11);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.connections[0].say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('error').up(),
	            	    componentId: '123456'
	        		})						
                })
    		})
    		
    		result.on('error', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);      
    			test.equals(event.cause, 'error');
                test.done();
            })
            result.on('end', function(event) {
    			test.ok(false, "this event is not expected");
    		});
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Connection say fires start event' : function(test) {
        test.expect(10);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.connections[0].say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
                })
    		})
    		
    		result.on('start', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);      
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    'Call say fires start event' : function(test) {
        test.expect(10);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.say('foo', 'bar');
    		test.ok(result);
    		test.deepEqual(result.tokens, ['foo', 'bar']);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[0].children[0], 'foo', 'Unexpected audio text');
                    test.equals(command.body.children[1].getName(), 'p', 'Unexpected Element Name');
                    test.equals(command.body.children[1].children[0], 'bar', 'Unexpected audio text');
					callback(null, new XmlElement('ref', {id:'123456'}));
                })
    		})
    		
    		result.on('start', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.say, result);
    			test.equals(event.subscriber, subscriber);      
                test.done();
            });
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Voice attribute is sent' : function(test) {
        test.expect(3);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.connections[0].say('foo', {voice: 'veronica'});
    		test.ok(result);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.attrs['voice'], 'veronica', 'Unexpected Attribute value');
					callback(null, new XmlElement('ref', {id:'123456'}));
					test.done();
                })
    		})    		
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    'Repeat attribute is sent' : function(test) {
        test.expect(3);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});            	
            
            var result = call.connections[0].say('foo', {repeat: 5});
    		test.ok(result);
    		process.nextTick(function() {
    		    transport.next(function(command, callback) {     	
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.attrs['repeat'], '5', 'Unexpected Attribute value');
					callback(null, new XmlElement('ref', {id:'123456'}));
					test.done();
                })
    		})    		
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },   
    
    'ifBusy attribute is sent' : function(test) {
        test.expect(3);
        tropo.on('call:connected', function(event) {
            var subscriber = event.subscriber;
            var call = event.call
            process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
            });             
            
            var result = call.connections[0].say('foo', {ifBusy: 'queue'});
            test.ok(result);
            process.nextTick(function() {
                transport.next(function(command, callback) {        
                    test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
                    test.equals(command.body.attrs['if-busy'], 'queue', 'Unexpected Attribute value');
                    callback(null, new XmlElement('ref', {id:'123456'}));
                    test.done();
                })
            })          
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },   
           
    'invalid ifBusy attribute' : function(test) {
        test.expect(2);
        tropo.on('call:connected', function(event) {
            var subscriber = event.subscriber;
            var call = event.call
            process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
            });             
            
            try {
                var result = call.connections[0].say('foo', {ifBusy: 'foo'});
                test.ok(false);
            } catch (ex) {
                test.ok(ex);
                test.equals(ex.message,'Invalid value for ifBusy: foo. Should be one of: queue|stop|error');
                test.done();
            }
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    }, 
};

function handleOutput(test, componentId, callId, connectionId, assertions, cause) {
	
	process.nextTick(function() {
	    transport.next(function(command, callback) {     	
	    	console.log('Received send command ' + command);
	    	console.log('Will send callback: ' + new XmlElement('ref', {id:componentId}));
	        test.equals(command.body.getName(), 'output', 'Unexpected Element Name');
	        assertions(command);
			callback(null, new XmlElement('ref', {id:componentId}));
			
			var body;
			if (callId) {
				body = new XmlElement('complete', {'call-id':callId, 'connection-id':connectionId, to:defaultTo}).c(cause).up();
			} else {
				body = new XmlElement('complete').c(cause).up();
			}
			
	    	rayoEvent({
	    	    body: body,
	    	    componentId: componentId,
	    	    callId: callId,
	    	    connectionId: connectionId
			})
		});
    })
}

function rayoEvent(event) {
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var componentId = null;
    if (event.callId) {
        callId = event.callId;
    } 
    if (event.connectionId) {
    	connectionId = event.connectionId;
    }    
    if (event.componentId) {
        componentId = event.componentId;
    } 
    
    transport.emit('callEvent', {
        callId : callId,
        connectionId : connectionId,
        componentId : componentId,
        body : event.body
    });
};

function newCall(options) {
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var direction = 'in';
    if (options) {
        if (options.callId) {
            callId = options.callId;
        }
        if (options.connectionId) {
        	connectionId = options.connectionId;
        }
        if (options.direction) {
            direction = options.direction;
        }
    }
    
    var body = new XmlElement('offer', {
        to : defaultTo,
        from : defaultFrom,
        'direction' : direction,
    });

	var subscription = body.c('subscription');
	subscription.c('address').t(defaultTo);
	if (options.permissions) {
		for (var permission in options.permissions) {
			subscription.c('permission', {'name':options.permissions[permission]})
		}
	}    
    
    transport.emit('callEvent', {
        callId : callId,
        connectionId : connectionId,
        body : body
    });
};
