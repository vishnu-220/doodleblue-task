var Rayo = require('../lib/rayo')
var util = require('util');
var events = require('events');
var Tropo = require('../lib/tropo-impl');
var MockTransport = require('../lib/rayo-mock');
var fs = require('fs');
var http = require('http');
var XmlElement = require('../lib/utils').XmlElement;

var tropo = null;
var transport = null;

var defaultCallId = 'foocall';
var defaultConnectionId = 'fooconn';
var defaultTo = 'tel:+555';
var defaultFrom = 'tel:+666';

module.exports = {

    setUp : function(callback) {
        var transportConfig = {
            type : 'mock'
        };
        var rayoConfig = {
        	callPingInterval : '5000'
        };

        tropo = new Tropo();
        tropo.debug = true;
        
        // Initialize Tropo
        tropo.init({
            rayoTransportConfig : transportConfig,
            rayoConfig: rayoConfig,
            defaultPermissions: ['CALL_RING_LIST']
        });
        transport = tropo.mockTransport;
        callback();
    },
    tearDown: function(callback) {
    	
    	tropo.shutdown();
    	callback();
    },
    'Record succeeds' : function(test) {
        test.expect(10);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
            	
                var options = {
                		to: 'recording.mp3',
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
            	                
                var recording = call.record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    test.equals(command.body.attrs['format'], options.format, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['start-beep'], options.startBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['stop-beep'], options.stopBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['initial-timeout'], (options.initialTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['final-timeout'], (options.finalTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['max-duration'], (options.maxDuration * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['duplex'], 'true', 'Unexpected attribute value');
	                    test.equals(command.body.attrs['to'], options.to, 'recording.mp3');
	                    
	    				test.done();
	                })
        		})
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    }, 
    'Connection record succeeds' : function(test) {
        test.expect(11);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
            	
                var options = {
                		to: 'recording.mp3',
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
            	                
                var recording = call.connections[0].record(options);
                test.ok(recording);
                test.equals(recording.connection, call.connections[0]);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    test.equals(command.body.attrs['format'], options.format, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['start-beep'], options.startBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['stop-beep'], options.stopBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['initial-timeout'], (options.initialTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['final-timeout'], (options.finalTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['max-duration'], (options.maxDuration * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['duplex'], 'false', 'Unexpected attribute value');
	                    test.equals(command.body.attrs['to'], options.to, 'recording.mp3');
	                    
	    				test.done();
	                })
        		})
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });    	
    },
    
    'Record complete is processed' : function(test) {
        test.expect(17);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1,
                        to : 'recording.mp3'
                };
            	                
                var recording = call.record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    test.equals(command.body.attrs['format'], options.format, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['start-beep'], options.startBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['stop-beep'], options.stopBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['initial-timeout'], (options.initialTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['final-timeout'], (options.finalTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['max-duration'], (options.maxDuration * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['duplex'], 'true', 'Unexpected attribute value');
	                    test.equals(command.body.attrs['to'], 'recording.mp3', 'Unexpected attribute value');
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    var component = call.rayoCall.components['123456'];;                        		
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('recording', {'uri':'./growl.wav', 'duration':'10500', 'serverFilename':'recording.mp3'}).up(),
	                	    componentId: '123456'
	            		})      		
	                })
        		})
                
            	recording.on('end', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.subscriber, subscriber);
					test.equals(event.cause, 'success');
					test.equals(event.duration, 10.500);
					test.equals(recording.duration, 10.500);
					test.equals(recording.serverFilename, 'recording.mp3');
            	    test.done();
            	});				                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Connection Record complete is processed' : function(test) {
        test.expect(18);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1,
                        to : 'recording.mp3'
                };
            	                
                var recording = call.connections[0].record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    test.equals(command.body.attrs['format'], options.format, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['start-beep'], options.startBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['stop-beep'], options.stopBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['initial-timeout'], (options.initialTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['final-timeout'], (options.finalTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['max-duration'], (options.maxDuration * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['duplex'], 'false', 'Unexpected attribute value');
	                    test.equals(command.body.attrs['to'], 'recording.mp3', 'Unexpected attribute value');
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    var component = call.rayoCall.components['123456'];;                        		
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('recording', {'uri':'./growl.wav', 'duration':'10500', 'serverFilename':'recording.mp3'}).up(),
	                	    componentId: '123456'
	            		})      		
	                })
        		})
                
            	recording.on('end', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.connection, call.connections[0]);
					test.equals(event.subscriber, subscriber);
					test.equals(event.cause, 'success');
					test.equals(event.duration, 10.500);
					test.equals(recording.duration, 10.500);
					test.equals(recording.serverFilename, 'recording.mp3');
            	    test.done();
            	});				                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    
    'Record stop succeeds' : function(test) {
        test.expect(13);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
            	                
                var recording = call.record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    test.equals(command.body.attrs['format'], options.format, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['start-beep'], options.startBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['stop-beep'], options.stopBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['initial-timeout'], (options.initialTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['final-timeout'], (options.finalTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['max-duration'], (options.maxDuration * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['duplex'], 'true', 'Unexpected attribute value');
	                    callback(null, new XmlElement('ref', {id:'123456'}));

	                    recording.stop();
	            		process.nextTick(function() {
	            		    transport.next(function(command, callback) {    
		                        test.equals(command.body.getName(), 'stop', 'Unexpected Element Name');
		                        
			                    var component = call.rayoCall.components['123456'];;
		                    	rayoEvent({
		                    	    body: new XmlElement('complete').c('recording', {'uri':'./growl.wav', 'duration':'20000'}).up().c('stop').up(),
		                    	    componentId: '123456'
		                		})      		

		                    })
	            		})
	                })
        		})
               
            	recording.on('end', function(event) {
					test.equals(event.cause, 'stop');
					test.equals(event.duration, 20);
					test.equals(recording.duration, 20);
            	    test.done();
            	});                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Connection Record stop succeeds' : function(test) {
        test.expect(14);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
            	                
                var recording = call.connections[0].record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    test.equals(command.body.attrs['format'], options.format, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['start-beep'], options.startBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['stop-beep'], options.stopBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['initial-timeout'], (options.initialTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['final-timeout'], (options.finalTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['max-duration'], (options.maxDuration * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['duplex'], 'false', 'Unexpected attribute value');
	                    callback(null, new XmlElement('ref', {id:'123456'}));

	                    recording.stop();
	            		process.nextTick(function() {
	            		    transport.next(function(command, callback) {    
		                        test.equals(command.body.getName(), 'stop', 'Unexpected Element Name');
		                        
			                    var component = call.rayoCall.components['123456'];;
		                    	rayoEvent({
		                    	    body: new XmlElement('complete').c('recording', {'uri':'./growl.wav', 'duration':'20000'}).up().c('stop').up(),
		                    	    componentId: '123456'
		                		})      		

		                    })
	            		})
	                })
        		})
               
            	recording.on('end', function(event) {
					test.equals(event.cause, 'stop');
					test.equals(event.connection, call.connections[0]);
					test.equals(event.duration, 20);
					test.equals(recording.duration, 20);
            	    test.done();
            	});                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    
    'Record stop command fails if call has ended' : function(test) {
        test.expect(3);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
            	                
                var recording = call.record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    rayoEvent({
	                        body: new XmlElement('end')
	                    });

	                    recording.stop();
	                })
        		})
               
            	recording.on('error', function(event) {
					test.equals(event.error.message, 'Tropo Call [foocall], Connection [null] has ended.');
            	    test.done();
            	});                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Connection Record stop command fails if call has ended' : function(test) {
        test.expect(3);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
            	                
                var recording = call.connections[0].record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    rayoEvent({
	                        body: new XmlElement('end')
	                    });

	                    recording.stop();
	                })
        		})
               
            	recording.on('error', function(event) {
					test.equals(event.error.message, 'Tropo Call [foocall], Connection [fooconn] has ended.');
            	    test.done();
            	});                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },        
    
    'Record complete with hangup is processed' : function(test) {
        test.expect(15);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
            	                
                var recording = call.record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    test.equals(command.body.attrs['format'], options.format, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['start-beep'], options.startBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['stop-beep'], options.stopBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['initial-timeout'], (options.initialTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['final-timeout'], (options.finalTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['max-duration'], (options.maxDuration * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['duplex'], 'true', 'Unexpected attribute value');
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    var component = call.rayoCall.components['123456'];;                        		
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('hangup').up().c('recording', {'uri':'./growl.wav', 'duration':'15000'}).up(),
	                	    componentId: '123456'
	            		})      		

	                })
        		})
                
            	recording.on('end', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.subscriber, subscriber);
					test.equals(event.cause, 'hangup');
					test.equals(event.duration, 15);
					test.equals(recording.duration, 15);
            	    test.done();
            	});				                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Connection Record complete with hangup is processed' : function(test) {
        test.expect(16);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
            	                
                var recording = call.connections[0].record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    test.equals(command.body.attrs['format'], options.format, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['start-beep'], options.startBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['stop-beep'], options.stopBeep.toString(), 'Unexpected attribute value');
	                    test.equals(command.body.attrs['initial-timeout'], (options.initialTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['final-timeout'], (options.finalTimeout * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['max-duration'], (options.maxDuration * 10000) / 10, 'Unexpected attribute value');
	                    test.equals(command.body.attrs['duplex'], 'false', 'Unexpected attribute value');
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    var component = call.rayoCall.components['123456'];;                        		
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('hangup').up().c('recording', {'uri':'./growl.wav', 'duration':'15000'}).up(),
	                	    componentId: '123456'
	            		})      		

	                })
        		})
                
            	recording.on('end', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.connection, call.connections[0]);
					test.equals(event.subscriber, subscriber);
					test.equals(event.cause, 'hangup');
					test.equals(event.duration, 15);
					test.equals(recording.duration, 15);
            	    test.done();
            	});				                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },           
    
    'Recorded file can be read. End event on stream.' : function(test) {
        test.expect(2);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.record();
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'13000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		})
                
            	recording.on('end', function() {
                	console.log('Recording finished');
                	var stream = recording.createReadStream();
                	var recordingDir = './junit.out';
                	if (!fs.existsSync(recordingDir)) {
                		fs.mkdirSync(recordingDir);
                	}
                	var copy = fs.createWriteStream(recordingDir + '/recording.wav');
                	stream.pipe(copy);
                	stream.on('end', function() {
                	    test.done();                		
                	})
            	});			                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Recorded file can be read. Finish event on stream.' : function(test) {
        test.expect(2);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.record();
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'17000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		})
                
            	recording.on('end', function() {
                	console.log('Recording finished');
                	var stream = recording.createReadStream();
                	var recordingDir = './junit.out';
                	if (!fs.existsSync(recordingDir)) {
                		fs.mkdirSync(recordingDir);
                	}
                	var copy = fs.createWriteStream(recordingDir + '/recording.wav');
                	stream.pipe(copy);
                	copy.on('finish', function() {
                	    test.done();                		
                	})
            	});			                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Recorded file can be read. Finish event on pipe.' : function(test) {
        test.expect(2);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.record();
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'23000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		})
                
            	recording.on('end', function() {
                	console.log('Recording finished');
                	var stream = recording.createReadStream();
                	var recordingDir = './junit.out';
                	if (!fs.existsSync(recordingDir)) {
                		fs.mkdirSync(recordingDir);
                	}
                	var copy = fs.createWriteStream(recordingDir + '/recording.wav');
                	stream.pipe(copy).on('finish', function() {
                	    test.done();                		
                	})
            	});			                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    
    'Connection record fails when connection is not connected' : function(test) {
        test.expect(2);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:incoming', function(event) {
            	var call = event.call                
                var targets = ['a','b'];
			    var connection = call.connect(targets);

            	connection.on('error', function(error) {
				    test.ok(error);
        		});

                var recording = connection.record();
                test.ifError(recording);
                test.done();		
            });
        });
        newCall();
    },     
    
    'Record fails when call is not connected' : function(test) {
        test.expect(2);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:incoming', function(event) {
            	var call = event.call
                
        		call.on('error', function(error) {
				    test.ok(error);
        		});
                var recording = call.record();
                test.ifError(recording);
                test.done();		
            });
        });
        newCall();
    },
    'Recording attributes cannot be set' : function(test) {
        test.expect(11);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
            	                
                var recording = call.record(options);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
	                    test.equals(command.body.attrs['format'], options.format, 'Unexpected attribute value');
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    for(var key in options) {
	                        recording[key] = 'changed!';
	                    }
	                    for(var key in options) {
	                        test.equals(recording[key], options[key]);
	                    }
	                    test.equals(recording.format, 'mp3');
	                    test.done();
	                })
        		})

            });
        });
        newCall();        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },   
    'Recording error is processed' : function(test) {
        test.expect(7);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
            	                
                var recording = call.record();
                test.ok(recording);
            	process.nextTick(function() {
	                transport.next(function(command, callback) { 
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    var component = call.rayoCall.components['123456'];                        		
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('error').up(),
	                	    componentId: '123456'
	            		})      		
	                });
            	});            	
                
            	recording.on('error', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.subscriber, subscriber);
					test.equals(event.cause, 'error');
					test.equals(event.duration, -1);
					test.equals(recording.duration, -1);
            	    test.done();
            	});				    
        		recording.on('end', function(event) {
        			test.ok(false, "this event is not expected");
        		});
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Connection recording error is processed' : function(test) {
        test.expect(8);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
            	                
                var recording = call.connections[0].record();
                test.ok(recording);
            	process.nextTick(function() {
	                transport.next(function(command, callback) { 
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    var component = call.rayoCall.components['123456'];                        		
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('error').up(),
	                	    componentId: '123456'
	            		})      		
	                });
            	});            	
                
            	recording.on('error', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.connection, call.connections[0]);
					test.equals(event.subscriber, subscriber);
					test.equals(event.cause, 'error');
					test.equals(event.duration, -1);
					test.equals(recording.duration, -1);
            	    test.done();
            	});				    
        		recording.on('end', function(event) {
        			test.ok(false, "this event is not expected");
        		});
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },   
    
    'Recording timeout is processed' : function(test) {
        test.expect(7);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
            	                
                var recording = call.record();
                test.ok(recording);
            	process.nextTick(function() {
	                transport.next(function(command, callback) { 
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    var component = call.rayoCall.components['123456'];                        		
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('timeout').up(),
	                	    componentId: '123456'
	            		})      		
	                });
            	});            	
                
            	recording.on('error', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.subscriber, subscriber);
					test.equals(event.cause, 'final_timeout');
					test.equals(event.duration, -1);
					test.equals(recording.duration, -1);
            	    test.done();
            	});			
        		recording.on('end', function(event) {
        			test.ok(false, "this event is not expected");
        		});
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    }, 
    'Recording max_duration is processed' : function(test) {
        test.expect(6);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
            	                
                var recording = call.record();
                test.ok(recording);
            	process.nextTick(function() {
	                transport.next(function(command, callback) { 
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    var component = call.rayoCall.components['123456'];                        		
	                	rayoEvent({
	                	    body: new XmlElement('complete').c('max_duration').up().c('recording', {'uri':'./growl.wav', 'duration':'2000'}).up(),
	                	    
	                	    componentId: '123456'
	            		})      		
	                });
            	});            	
                
            	recording.on('end', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.subscriber, subscriber);
					test.equals(event.cause, 'max_duration');
					test.equals(event.duration, 2);
            	    test.done();
            	});			
        		recording.on('error', function(event) {
        			test.ok(false, "this event is not expected");
        		});
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    'Recording init timeout is processed' : function(test) {
        test.expect(7);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
            	                
                var recording = call.record();
                test.ok(recording);
            	process.nextTick(function() {
	                transport.next(function(command, callback) { 
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                    
	                    var component = call.rayoCall.components['123456'];                        		
	                	rayoEvent({
                            body: new XmlElement('complete').c('initial_timeout').up().
                              c('recording', {'uri':'http://phono.com/audio/troporocks.mp3', 'size':'16508', 'duration':'0'}).up(),
	                	    componentId: '123456'
	            		})      		
	                });
            	});            	
                
            	recording.on('end', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.subscriber, subscriber);
					test.equals(event.cause, 'initial_timeout');
					test.equals(event.duration, 0);
					test.equals(recording.duration, 0);
            	    test.done();
            	});			
        		recording.on('error', function(event) {
        			test.ok(false, "this event is not expected");
        		});
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Record fires start event' : function(test) {
        test.expect(4);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
                var recording = call.record(options);
                test.ok(recording);
                recording.on('start', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.subscriber, subscriber);
                	test.done();
                });
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     		                    
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                })
        		})
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Connection record fires start event' : function(test) {
        test.expect(5);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
            	
                var options = {
                        format : 'mp3',
                        startBeep : true,
                        stopBeep : true,
                        maxDuration : 30.5,
                        initialTimeout : 5.2,
                        finalTimeout : 3.1
                };
                var recording = call.connections[0].record(options);
                test.ok(recording);
                recording.on('start', function(event) {
					test.equals(event.recording, recording);
					test.equals(event.call, call);
					test.equals(event.connection, call.connections[0]);
					test.equals(event.subscriber, subscriber);
                	test.done();
                });
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     		                    
	                    callback(null, new XmlElement('ref', {id:'123456'}));
	                })
        		})
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    }, 
    
    'Error is emitted when an error happens fetching a recording' : function(test) {
        test.expect(3);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.record();
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'23000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		})
                var oldHttpGet = http.get;
        		
        		http.get = function(options, callback) {
        			var response = {statusCode:'403'};
        			callback(response);
        		};        		
        		
            	recording.on('error', function(error) {
                	console.log('Error while fetching recording. Done.');
                	test.ok(error);
                	
                	http.get = oldHttpGet;
                	test.done();
            	});
            	recording.on('end', function(event) {
                	console.log('Recording finished');
                	recording.createReadStream();
                	test.ok(event);
            	});			                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    }, 
    'A recording complete is sent when expireAfterFetch is enabled' : function(test) {
        test.expect(4);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.record({expireAfterFetch:true});
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'13000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		});
                
        		var oldHttpGet = http.get;
        		var tries = 0;
        		http.get = function(options, callback) {
        			if (options.path.indexOf('complete') != -1) {
	        			test.equals(options.hostname, 'www.freesound.org');
	        			test.equals(options.path, '/data/previews/0/554_409-lq.mp3/complete');
	        			var response = {statusCode:'200'};
	        			callback(response);
	            	    test.done();           
	            	    http.get = oldHttpGet;
        			} else {
        				oldHttpGet(options, callback);
        			}
        		};        		
				
            	recording.on('end', function() {
                	console.log('Recording finished');
                	var stream = recording.createReadStream();
                	var recordingDir = './junit.out';
                	if (!fs.existsSync(recordingDir)) {
                		fs.mkdirSync(recordingDir);
                	}
                	var copy = fs.createWriteStream(recordingDir + '/recording.wav');
                	stream.pipe(copy);
            	});			                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    'Error on recording expire after fetch' : function(test) {
        test.expect(5);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.record({expireAfterFetch:true});
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'13000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		});
                
        		var oldHttpGet = http.get;
        		http.get = function(options, callback) {
        			if (options.path.indexOf('complete') != -1) {
        				console.log('throwing error');
	        			test.equals(options.hostname, 'www.freesound.org');
	        			test.equals(options.path, '/data/previews/0/554_409-lq.mp3/complete');
	        			var response = {statusCode:'403'};
	        			callback(response);
        			} else {
        				oldHttpGet(options, callback);
        			}
        		};        		

            	recording.on('end', function() {
                	console.log('Recording finished');
                	var stream = recording.createReadStream();
                	var recordingDir = './junit.out';
                	if (!fs.existsSync(recordingDir)) {
                		fs.mkdirSync(recordingDir);
                	}
                	var copy = fs.createWriteStream(recordingDir + '/recording.wav');
                	stream.pipe(copy);
                	recording.on('error', function(error) {
                    	console.log('Error while deleting recording. Done.');
                    	test.ok(error);
                    	
                    	http.get = oldHttpGet;
                    	test.done();
                	});
            	});			                
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Recording delete is invoked' : function(test) {
        test.expect(6);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.record();
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'13000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		});
                
        		var oldHttpRequest = http.request;
        		http.request = function(options, callback) {
        			console.log('Options: ' + util.inspect(options));
        			test.equals(options.hostname, 'www.freesound.org');
        			test.equals(options.path, '/data/previews/0/554_409-lq.mp3');
        			var response = {statusCode:'200'};
        			callback(response);
        			http.request = oldHttpRequest;
        			
        			var request = {};
        			request.end = function() {
        				test.ok(true);
        				test.done();
        			};
        			return request;
        		};        		

            	recording.on('end', function() {
                	console.log('Recording finished');
                	test.ok(true);
                	recording.delete();
            	});			      
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Recording delete is invoked for connection record' : function(test) {
        test.expect(7);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.connections[0].record();
                console.log('Recording id: ' + recording.connection.id);
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'13000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		});
                
        		var oldHttpRequest = http.request;
        		http.request = function(options, callback) {
        			console.log('Options: ' + util.inspect(options));
        			test.equals(options.hostname, 'www.freesound.org');
        			test.equals(options.path, '/data/previews/0/554_409-lq.mp3');
        			test.equals(options.headers['connection-id'], 'fooconn');
        			var response = {statusCode:'200'};
        			callback(response);
        			http.request = oldHttpRequest;
        			
        			var request = {};
        			request.end = function() {
        				test.ok(true);
        				test.done();
        			};
        			return request;
        		};        		

            	recording.on('end', function() {
                	console.log('Recording finished');
                	test.ok(true);
                	recording.delete();
            	});			      
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    }, 
    
    'Recording delete throws error' : function(test) {
        test.expect(6);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.record();
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'13000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		});
                        		
        		var oldHttpRequest = http.request;
        		http.request = function(options, callback) {
        			test.equals(options.hostname, 'www.freesound.org');
        			test.equals(options.path, '/data/previews/0/554_409-lq.mp3');
        			var response = {statusCode:'403'};
        			callback(response);
        			http.request = oldHttpRequest;
        			
        			var request = {};
        			request.end = function() {
        				test.ok(true);
        			};
        			return request;
        		};        		
        		
            	recording.on('end', function() {
                	console.log('Recording finished');
                	test.ok(true);
                	recording.delete();
            	});
            	
            	recording.on('error', function(error) {
                	console.log('Error while deleting recording. Done.');
                	test.ok(error);                	
                	test.done();            		
            	});
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Connection recording delete throws error' : function(test) {
        test.expect(6);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.connections[0].record();
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
						
		                var component = call.rayoCall.components['123456'];;                        								
		            	rayoEvent({
		            	    body: new XmlElement('complete').c('recording', {'uri':'http://www.freesound.org/data/previews/0/554_409-lq.mp3', 'duration':'13000'}).up(),
		            	    componentId: '123456'
		        		})      		
	                })
        		});
                        		
        		var oldHttpRequest = http.request;
        		http.request = function(options, callback) {
        			test.equals(options.hostname, 'www.freesound.org');
        			test.equals(options.path, '/data/previews/0/554_409-lq.mp3');
        			var response = {statusCode:'403'};
        			callback(response);
        			http.request = oldHttpRequest;
        			
        			var request = {};
        			request.end = function() {
        				test.ok(true);
        			};
        			return request;
        		};        		
        		
            	recording.on('end', function() {
                	console.log('Recording finished');
                	test.ok(true);
                	recording.delete();
            	});
            	
            	recording.on('error', function(error) {
                	console.log('Error while deleting recording. Done.');
                	test.ok(error);                	
                	test.done();            		
            	});
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    
    'Error when deleting an incomplete recording' : function(test) {
        test.expect(4);
        tropo.on('subscribe', function(event) {
        	var subscriber = event.subscriber;

            subscriber.on('call:connected', function(event) {
            	var call = event.call
            	process.nextTick(function() {
	                transport.next(function(command, callback) { }); // connect
            	});            	
                
                var recording = call.record();
                test.ok(recording);
        		process.nextTick(function() {
        		    transport.next(function(command, callback) {     	
	                    test.equals(command.body.getName(), 'record', 'Unexpected Element Name');
						callback(null, new XmlElement('ref', {id:'123456'}));
	                })
        		});
                
            	recording.on('start', function() {
                	console.log('Recording finished');
                	test.ok(true);
                	recording.delete();
            	});
            	
            	recording.on('error', function(error) {
                	console.log('Error while deleting recording. Done.');
                	test.ok(error);
                	test.done();            		
            	});
            });
        });
        newCall();
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
};

function rayoEvent(event) {
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var componentId = null;
    if (event.callId) {
        callId = event.callId;
    } 
    if (event.connectionId) {
    	connectionId = event.connectionId;
    }
    if (event.componentId) {
        componentId = event.componentId;
    } 
    console.log('event', event.body.toString());
    transport.emit('callEvent', {
        callId : callId,
        connectionId : connectionId,
        componentId : componentId,
        body : event.body
    });
};

function newCall(options) {
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var direction = 'in';
    if (options) {
        if (options.callId) {
            callId = options.callId;
        }
        if (options.connectionId) {
        	connectionId = options.connectionId;
        }
        if (options.direction) {
            direction = options.direction;
        }
    }
    
    transport.emit('callEvent', {
        callId : callId,
        connectionId : connectionId,
        body : new XmlElement('offer', {
            to : defaultTo,
            from : defaultFrom,
            'direction' : direction
        })
    });
};
