var Rayo = require('../lib/rayo')
var util = require('util');
var events = require('events');
var Tropo = require('../lib/tropo-impl');
var MockTransport = require('../lib/rayo-mock');
var fs = require('fs');
var XmlElement = require('../lib/utils').XmlElement;
var xml2js = require('xml2js');

var xmlParser = new xml2js.Parser();

var tropo = null;
var transport = null;

var defaultCallId = 'foocall';
var defaultConnectionId = 'fooconn';
var defaultTo = 'tel:+555';
var defaultFrom = 'tel:+666';

process.on('uncaughtException', function(err) {
	console.log('Caught exception: ', err, err.stack);
	process.exit(1);
});

module.exports = {

    setUp : function(callback) {
        var transportConfig = {
            type : 'mock'
        };
        var rayoConfig = {
        	callPingInterval : '5000'
        };

        tropo = new Tropo();
        tropo.debug = true;
        //tropo.addSubscriber('test@tropo', null, ['CALL_RING_LIST'], null, null, )
        
        // Initialize Tropo
        tropo.init({
            rayoTransportConfig : transportConfig,
            rayoConfig: rayoConfig
        });
        transport = tropo.mockTransport;
        callback();
    },
    tearDown: function(callback) {
    	
    	tropo.shutdown();
    	callback();
    },  
    'Listen succeeds' : function(test) {
        test.expect(13);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
        	
            var result = call.connections[0].listen('[5 DIGITS]');
        	process.nextTick(function() {
                transport.next(function(command, callback) {
            		//console.log( command.body);
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'grammar', 'Unexpected Element Name');
                    test.equals(command.body.children[0].attrs['content-type'], 'application/grammar+voxeo', 'Unexpected attribute value');
                    test.equals(command.body.children[0].getText(), '[5 DIGITS]', 'Unexpected grammar value');
                    
                    
                    callback(null, new XmlElement('ref', { id : '123456' }));
	            	rayoEvent({
	            	    body: new XmlElement('complete')
	            			.c('match').c('interpretation').t('12345').up()
	            			.c('utterance').t('one two three four five').up().up(),
	            	    componentId: '123456'
	        		});
        	    });
        	});
    		test.ok(result);
    		test.deepEqual(result.grammars, ['[5 DIGITS]']);
    		
    		result.on('end', function(event) {
    			test.ok(event);
    			test.equals(result.result, '12345');
    			test.equals(event.cause, 'match');
    			test.equals(result.utterance, 'one two three four five');
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Listen with options succeeds' : function(test) {
        test.expect(29);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
        	
            var options = {
                    mode: 'any',
                    terminator : '#',
                    recognizer : 'en_US',
                    initialTimeout : 5,
                    interDigitTimeout : 2,
                    sensitivity : 0.5,
                    minConfidence : 0.4,
                    maxSilence: 3
            };

            var result = call.connections[0].listen('[5 DIGITS]', options);
            test.equals(result.mode, 'any', 'Unexpected attribute value');
            test.equals(result.terminator, '#', 'Unexpected attribute value');
            test.equals(result.recognizer, 'en_US', 'Unexpected attribute value');
            test.equals(result.initialTimeout, '5', 'Unexpected attribute value');
            test.equals(result.interDigitTimeout, '2', 'Unexpected attribute value');
            test.equals(result.sensitivity, '0.5', 'Unexpected attribute value');
            test.equals(result.minConfidence, '0.4', 'Unexpected attribute value');
            test.equals(result.maxSilence, '3', 'Unexpected attribute value');
    		test.ok(result);
    		test.deepEqual(result.grammars, ['[5 DIGITS]']);

        	process.nextTick(function() {
                transport.next(function(command, callback) {
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'grammar', 'Unexpected Element Name');
                    test.equals(command.body.children[0].attrs['content-type'], 'application/grammar+voxeo', 'Unexpected attribute value');
                    test.equals(command.body.children[0].getText(), '[5 DIGITS]', 'Unexpected grammar value');
                    test.equals(command.body.attrs['mode'], 'any', 'Unexpected attribute value');
                    test.equals(command.body.attrs['terminator'], '#', 'Unexpected attribute value');
                    test.equals(command.body.attrs['recognizer'], 'en_US', 'Unexpected attribute value');
                    test.equals(command.body.attrs['initial-timeout'], '5000', 'Unexpected attribute value');
                    test.equals(command.body.attrs['inter-digit-timeout'], '2000', 'Unexpected attribute value');
                    test.equals(command.body.attrs['sensitivity'], '0.5', 'Unexpected attribute value');
                    test.equals(command.body.attrs['min-confidence'], '0.4', 'Unexpected attribute value');
                    test.equals(command.body.attrs['max-silence'], '3000', 'Unexpected attribute value');
					callback(null, new XmlElement('ref', {id : '123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete')
			    			.c('match').c('interpretation').t('12345').up()
			    			.c('utterance').t('one two three four five').up().up(),
	            	    componentId: '123456'
	        		});
                });
            });        		
    		
    		result.on('end', function(event) {
    			test.ok(event);
    			test.equals(result.result, '12345');
    			test.equals(event.cause, 'match');
    			test.equals(result.utterance, 'one two three four five');
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    'Listen with url grammar succeeds' : function(test) {
        test.expect(12);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
        	
            var result = call.connections[0].listen('http://grammarserver.com/digits?min=1&max=10');
    		test.ok(result);
    		test.deepEqual(result.grammars, ['http://grammarserver.com/digits?min=1&max=10']);
        	process.nextTick(function() {
                transport.next(function(command, callback) { 
            		console.log(command.body);
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'grammar', 'Unexpected Element Name');
                    test.equals(command.body.children[0].attrs['url'], 'http://grammarserver.com/digits?min=1&amp;max=10', 'Unexpected attribute value');
					callback(null, new XmlElement('ref', {id : '123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete')
			    			.c('match').c('interpretation').t('12345').up()
			    			.c('utterance').t('one two three four five').up().up(),
	            	    componentId: '123456'
	        		})
                });
        	});
    		
    		result.on('end', function(event) {
    			test.ok(event);
    			test.equals(result.result, '12345');
    			test.equals(event.cause, 'match');
    			test.equals(result.utterance, 'one two three four five');
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },   
    'Listen with SRGS grammar succeeds' : function(test) {
        test.expect(13);
    	var srgs = '<grammar version="1.0" xml:lang="en-US" ' +
            'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' + 
            'xsi:schemaLocation="http://www.w3.org/2001/06/grammar ' +
            'http://www.w3.org/TR/speech-grammar/grammar.xsd" ' +
            'xmlns="http://www.w3.org/2001/06/grammar">' + 
                										
               '<meta name="maxTime" content="4000"/>' +
               '<meta name="minSpeechDuration" content="4000"/>' +
               '<meta name="minVolume" content="10"/>' +
               '<meta name="finalSilence" content="2000"/>' +
               '<meta name="terminate" content="true"/>' +
               											
               '<ruleref uri="urn:xmpp:rayo:cpa:dtmf:1"/>' +
               '<ruleref uri="urn:xmpp:rayo:cpa:modem:1"/>' +
           '</grammar>';
    		
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
            var grammar = new tropo.Grammar('application/srgs+xml', srgs);
            var result = call.connections[0].listen(grammar);
    		test.ok(result);
    		test.deepEqual(result.grammars[0].content, srgs);
        	process.nextTick(function() {
            	transport.next(function(command, callback) {
            		console.log('Body: ' + command.body);
            		console.log('Compare: ' + command.body.children[0].toString().trim() + ' to ' + srgs.trim());
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'grammar', 'Unexpected Element Name');
                    test.equals(command.body.children[0].attrs['content-type'], 'application/srgs+xml', 'Unexpected body value');
                    test.equals(command.body.children[0].children[0], '<![CDATA['+srgs+']]>', 'Unexpected body value');
					callback(null, new XmlElement('ref', {id : '123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete')
			    			.c('match').c('interpretation').t('12345').up()
			    			.c('utterance').t('one two three four five').up().up(),
	            	    componentId: '123456'
	        		})
                });
        	});
    		
    		result.on('end', function(event) {
    			test.ok(event);
    			test.equals(result.result, '12345');
    			test.equals(event.cause, 'match');
    			test.equals(result.utterance, 'one two three four five');
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Listen with multiple grammars succeeds' : function(test) {
        test.expect(15);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});

            var result = call.connections[0].listen('[5 DIGITS]', 'http://grammarserver.com/digits?min=1&max=10');
    		test.ok(result);
    		test.deepEqual(result.grammars, ['[5 DIGITS]','http://grammarserver.com/digits?min=1&max=10']);
        	process.nextTick(function() {
            	transport.next(function(command, callback) {
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'grammar', 'Unexpected Element Name');
                    test.equals(command.body.children[0].attrs['content-type'], 'application/grammar+voxeo', 'Unexpected attribute value');
                    test.equals(command.body.children[0].getText(), '[5 DIGITS]', 'Unexpected grammar value');
                    test.equals(command.body.children[1].getName(), 'grammar', 'Unexpected Element Name');
                    
                    var url = command.body.children[1].attrs['url'];
                    console.log(url);
                    test.equals(url, 'http://grammarserver.com/digits?min=1&amp;max=10', 'Unexpected attribute value');
					callback(null, new XmlElement('ref', {id : '123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete')
			    			.c('match').c('interpretation').t('12345').up()
			    			.c('utterance').t('one two three four five').up().up(),
	            	    componentId: '123456'
	        		})
                });
        	});
    		
    		result.on('end', function(event) {
    			test.ok(event);
    			test.equals(result.result, '12345');
    			test.equals(event.cause, 'match');
    			test.equals(result.utterance, 'one two three four five');
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },    
    'Listen stop succeeds' : function(test) {
        test.expect(9);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
        	
            var result = call.connections[0].listen('[5 DIGITS]');
    		test.ok(result);
    		test.deepEqual(result.grammars, ['[5 DIGITS]']);
        	process.nextTick(function() {
            	transport.next(function(command, callback) {
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
                    test.equals(command.body.children[0].getName(), 'grammar', 'Unexpected Element Name');
                    test.equals(command.body.children[0].attrs['content-type'], 'application/grammar+voxeo', 'Unexpected attribute value');
                    test.equals(command.body.children[0].getText(), '[5 DIGITS]', 'Unexpected grammar value');
					callback(null, new XmlElement('ref', {id : '123456'}));
                });
            	
                result.stop();
            	process.nextTick(function() {
	            	transport.next(function(command, callback) {
	            		test.equals(command.body.getName(), 'stop', 'Unexpected Element Name');
	            		
	                	rayoEvent({
	                	    body: new XmlElement('complete')
	                			.c('stop').up(),
	                	    componentId: '123456'
	            		})
	            	});
            	});
        	});
    		
    		result.on('end', function(event) {
    			test.ok(event);
    			test.equals(event.cause, 'stop');
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },  
    'Listen command fails if call has ended' : function(test) {
        test.expect(3);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect	                
        	});
        	            	
            var result = call.connections[0].listen('[5 DIGITS]');
    		test.ok(result);
    		test.deepEqual(result.grammars, ['[5 DIGITS]']);
        	process.nextTick(function() {
            	transport.next(function(command, callback) {
					callback(null, new XmlElement('ref', {id : '123456'}));
					
                    rayoEvent({
                        body: new XmlElement('end')
                    });
	                result.stop();
                });	            	
        	});
    		
    		result.on('error', function(event) {
				test.equals(event.error.message, 'Tropo Call [foocall], Connection [fooconn] has ended.');
        	    test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },  
    'Connection listen fails when connection is not connected' : function(test) {
        test.expect(2);
        tropo.on('call:incoming', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call                
            var targets = ['sip:a@tropo.com','sip:b@tropo.com'];
		    var connection = call.connect(targets);

        	connection.on('error', function(error) {
			    test.ok(error);
    		});

            var result = connection.listen('[5 DIGITS]');
            test.ifError(result);
            test.done();		
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
    },     
    'Listen does not match' : function(test) {
        test.expect(8);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
            
            var result = call.connections[0].listen('[5 DIGITS]');
    		test.ok(result);
        	process.nextTick(function() {
                transport.next(function(command, callback) { 
            		console.log(command.body);
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
					callback(null, new XmlElement('ref', {id : '123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('nomatch').up(),
	            	    componentId: '123456'
	        		})
                });
        	});
    		
    		result.on('end', function(event) {
    			test.ok(event);
    			test.equals(event.cause, 'nomatch');
    			test.ifError(result.result);
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Listen with no input' : function(test) {
        test.expect(8);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
            
            var result = call.connections[0].listen('[5 DIGITS]');
    		test.ok(result);
        	process.nextTick(function() {
                transport.next(function(command, callback) { 
            		console.log(command.body);
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
					callback(null, new XmlElement('ref', {id : '123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('noinput').up(),
	            	    componentId: '123456'
	        		})
                });
        	});
    		
    		result.on('end', function(event) {
    			test.ok(event);
    			test.equals(event.cause, 'noinput');
    			test.ifError(result.result);
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Listen fails with error' : function(test) {
        test.expect(8);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
            
            var result = call.connections[0].listen('[5 DIGITS]');
    		test.ok(result);
        	process.nextTick(function() {
                transport.next(function(command, callback) { 
            		console.log(command.body);
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
					callback(null, new XmlElement('ref', {id : '123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('error').t('Something bad happened').up(),
	            	    componentId: '123456'
	        		})
                })
        	})
            
    		result.on('end', function(event) {
    			test.ok(false, "this event is not expected");
    		});
    		
    		result.on('error', function(event) {
    			test.ok(event.error);
    			test.ifError(result.result);
    			test.equals(event.error.message, 'Something bad happened');
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Listen ends on hangup' : function(test) {
        test.expect(8);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
            
            var result = call.connections[0].listen('[5 DIGITS]');
    		test.ok(result);
        	process.nextTick(function() {
                transport.next(function(command, callback) {
            		console.log(command.body);
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
					callback(null, new XmlElement('ref', {id : '123456'}));
					
	            	rayoEvent({
	            	    body: new XmlElement('complete').c('hangup').up(),
	            	    componentId: '123456'
	        		})
                })
        	})
    		result.on('end', function(event) {
    			test.ok(event);
    			test.ifError(result.result);
    			test.equals(event.cause, 'hangup');
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    'Listen fires start event' : function(test) {
        test.expect(5);
        tropo.on('call:connected', function(event) {
        	var subscriber = event.subscriber;
        	var call = event.call
        	process.nextTick(function() {
                transport.next(function(command, callback) { }); // connect
        	});
            
            var result = call.connections[0].listen('[5 DIGITS]');
    		test.ok(result);
        	process.nextTick(function() {
                transport.next(function(command, callback) {
            		console.log(command.body);
                    test.equals(command.body.getName(), 'input', 'Unexpected Element Name');
					callback(null, new XmlElement('ref', {id : '123456'}));
                })
        	})
    		result.on('start', function(event) {
    			test.equals(event.call, call);
    			test.equals(event.subscriber, subscriber);
    			test.equals(event.listen, result);
                test.done();
            })
        });
        newCall({subscriber: defaultTo, permissions: ['CALL_RING_LIST']});
        
        var blegId = 'o1';
        rayoEvent({
            body: new XmlElement('announce').c('joining', {'call-id':blegId, to:defaultTo}).up()
        });
        rayoEvent({
            body: new XmlElement('joined'),
            connectionId : blegId
        });
    },
    
};

function rayoEvent(event) {
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var componentId = null;
    if (event.callId) {
        callId = event.callId;
    } 
    if (event.connectionId) {
    	connectionId = event.connectionId;
    }
    if (event.componentId) {
        componentId = event.componentId;
    } 
    
    transport.emit('callEvent', {
        callId : callId,
        connectionId : connectionId,
        componentId : componentId,
        body : event.body
    });
};

function newCall(options) {
    var callId = defaultCallId;
    var connectionId = defaultConnectionId;
    var direction = 'in';
    if (options) {
        if (options.callId) {
            callId = options.callId;
        }
        if (options.connectionId) {
        	connectionId = options.connectionId;
        }
        if (options.direction) {
            direction = options.direction;
        }
    }
    var body = new XmlElement('offer', {
        to : defaultTo,
        from : defaultFrom,
        'direction' : direction,
    });

	var subscription = body.c('subscription');
	subscription.c('address').t(defaultTo);
	if (options.permissions) {
		for (var permission in options.permissions) {
			subscription.c('permission', {'name':options.permissions[permission]})
		}
	}	
    
    transport.emit('callEvent', {
        callId : callId,
        connectionId : connectionId,
        body : body
    });
};
