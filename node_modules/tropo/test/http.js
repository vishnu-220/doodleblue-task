var Rayo = require('../lib/rayo')
var util = require('util');
var events = require('events');
var request = require('request');

var client = null;
var listenAddress='localhost:62000';

process.on('uncaughtException', function(err) {
	console.log('Caught exception: ', err, err.stack);
	process.exit(1);
});


var Transport = require('../lib/rayo-http.js'); 
var transport = new Transport({rayoAddress:'http://localhost:8080', listenAddress:listenAddress});

module.exports = {

   setUp: function(callback) {
      client = new Rayo({}, transport);
      callback();
   },
   
   tearDown: function(callback) {
	 
	   if (client) {
		   console.log('Disposing');
		   client.dispose();
		   //transport.stop();
		   transport._server.close();
		   transport.removeAllListeners('callEvent');
	   }
	   callback();
   },

   'Test mid sequence is incremented within single call': function(test) {

      test.expect(2);
      test.ok(client);
      client.on('offer', function(event) {

    	  console.log('Received offer');
    	  client.tropoCalls['abcd'].rayoCalls['c1'].on('answered', function() {
	    	  console.log('Received answered');
	    	  test.equals(transport.tropoMids['abcd'], 3);
	    	  test.done();
    	  });  
    	  send({mid:'2', 'call-id':'abcd', 'connection-id':'c1'}, "<ringing/>")
    	  send({mid:'3', 'call-id':'abcd', 'connection-id':'c1'}, "<answered/>")
      });
      setTimeout(function() {
    	  send({mid:'1', 'call-id':'abcd', 'connection-id':'c1'}, "<offer from='a' to='b'/>")
      }, 2000);
   },

   'Test mid sequence is incremented on multiple calls': function(test) {

	   	  var adone, bdone;
	      test.expect(3);
	      test.ok(client);
	      client.on('offer', function(event) {

	    	  if (event.callId == 'abcd') {
		    	  client.tropoCalls['abcd'].rayoCalls['c1'].on('joined', function() {
			    	  console.log('Received joined');
			    	  test.equals(transport.tropoMids['abcd'], 4);
			    	  adone = true;
			    	  if (adone && bdone) {
			    		  test.done();
			    	  }
		    	  });
		    	  send({mid:'2', 'call-id':'abcd', 'connection-id':'c1'}, "<ringing/>")
		    	  send({mid:'3', 'call-id':'abcd', 'connection-id':'c1'}, "<answered/>")
		    	  send({mid:'4', 'call-id':'abcd', 'connection-id':'c1'}, "<joined/>")
	    	  } else {
		    	  client.tropoCalls['zyxw'].rayoCalls['c2'].on('unjoined', function() {
			    	  console.log('Received end');
			    	  test.equals(transport.tropoMids['zyxw'], 5);
			    	  bdone = true;
			    	  if (adone && bdone) {
			    		  test.done();
			    	  }
		    	  });	    		  
		    	  send({mid:'2', 'call-id':'zyxw', 'connection-id':'c2'}, "<ringing/>")
		    	  send({mid:'3', 'call-id':'zyxw', 'connection-id':'c2'}, "<answered/>")
		    	  send({mid:'4', 'call-id':'zyxw', 'connection-id':'c2'}, "<joined/>")
		    	  send({mid:'5', 'call-id':'zyxw', 'connection-id':'c2'}, "<unjoined/>")
	    	  }
	      });
	      setTimeout(function() {
	    	  send({mid:'1', 'call-id':'abcd', 'connection-id':'c1'}, "<offer from='a' to='b'/>")
	    	  send({mid:'1', 'call-id':'zyxw', 'connection-id':'c2'}, "<offer from='b' to='a'/>")
	      }, 2000);
	   },
	   
	   'Test duplicate messages are ignored': function(test) {

		  var messages = 0;
		  var responses = 0;
	      test.expect(4);
	      test.ok(client);
	      client.on('offer', function(event) {

	    	  messages++;
	    	  console.log('Received offer');
	    	  setTimeout(function() {
	    		  
		    	  test.equals(transport.tropoMids['abcd'], 1);
		    	  test.equals(messages,1);
		    	  test.equals(responses,4);
		    	  test.done();
	    	  }, 2000);
	      });
	      var callback = function(err, res) {
	          if (res.statusCode == 203) {
	        	  responses++;
	          }  
	      }
	      setTimeout(function() {
	    	  send({mid:'1', 'call-id':'abcd', 'connection-id':'c1'}, "<offer from='a' to='b'/>", callback);
	    	  send({mid:'1', 'call-id':'abcd', 'connection-id':'c1'}, "<offer from='a' to='b'/>", callback);
	    	  send({mid:'1', 'call-id':'abcd', 'connection-id':'c1'}, "<offer from='a' to='b'/>", callback);
	    	  send({mid:'1', 'call-id':'abcd', 'connection-id':'c1'}, "<offer from='a' to='b'/>", callback);
	      }, 2000);
	   },

	   'Test sequences are disposed for ended calls': function(test) {

		      test.expect(5);
		      test.ok(client);
		      client.on('offer', function(event) {

		    	  test.ok(client.tropoCalls['abcd'].rayoCalls['c1']);
		    	  test.equals(client.transport.tropoMids['abcd'],1);
		    	  client.unregisterCallLeg('abcd','c1');
		    	  client.disposeCall('abcd');
		    	  test.ifError(client.tropoCalls['abcd']);
		    	  test.ifError(client.transport.tropoMids['abcd']);
		    	  test.done();
		      });
		      setTimeout(function() {
		    	  send({mid:'1', 'call-id':'abcd', 'connection-id':'c1'}, "<offer from='a' to='b'/>");
		      }, 2000);
		   },	   
};

   
function send(headers, body, callback) {

	console.log('Sending message ' + body);
    request.post({
        headers: headers,
        url: 'http://'+listenAddress,
        body: body}, function(err, res, body){
		    if (callback) {
		    	callback(err,res);
		    }
        });
};



